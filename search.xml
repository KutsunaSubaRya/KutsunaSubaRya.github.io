<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019新北市國際資訊奧林匹亞研習營初選資格選拔</title>
    <url>/2019/01/24/2019%E6%96%B0%E5%8C%97%E5%B8%82%E5%9C%8B%E9%9A%9B%E8%B3%87%E8%A8%8A%E5%A5%A7%E6%9E%97%E5%8C%B9%E4%BA%9E%E7%A0%94%E7%BF%92%E7%87%9F%E5%88%9D%E9%81%B8%E8%B3%87%E6%A0%BC%E9%81%B8%E6%8B%94/</url>
    <content><![CDATA[<p>來寫個心得～ （不算長文（？而且很流水帳喔&gt;&lt;<br>2019資奧TOI初選前熱身營隊（？</p>
<h3 id="Day1-1-21"><a href="#Day1-1-21" class="headerlink" title="Day1(1/21)"></a>Day1(1/21)</h3><p>因為是第一天報到，所以試著早起（5 點喔<br>來到了板中，開始上課時發現我沒吃早餐…..可悲<br>第一天只教DP但也是顛覆我人生的第 一次聽到如此動人又詳盡的DP，才開 始發現我以前原來跟DP很不熟。<br>然後很順利的跟坐附近的同學們聊得很來（？<br>還有一個保送科大，電m(_ _)m<br>大部分都寫ZJ 的題目，而且很多是蝸牛老師出的，感到有一種循序漸進～&gt;&lt;<br>回家坐在椅子上直接睡著，耶～習題沒寫完</p>
<h3 id="進入Day2-1-22"><a href="#進入Day2-1-22" class="headerlink" title="進入Day2(1/22)"></a>進入Day2(1/22)</h3><p>早上四點起床發現沒寫習題，開拼～<br>不知不覺5:30了，差一點錯過第一班公車<br>然後，到了板橋車站附近我居然記得吃早餐ww<br>小抱怨，快上課了警衛才記得把樓下鐵捲門打開QAQ<br>第二天教的是簡單的資料結構、前中後序轉換、DFS、BFS，也是邊刷題邊上課<br>然後神奇的鄰座學長是樹大神，解惑了些許對於樹的疑惑~(聽說高職專學樹(?羨慕)<br>回家亦然倒頭就睡</p>
<h3 id="差點遲到的Day3-1-23"><a href="#差點遲到的Day3-1-23" class="headerlink" title="差點遲到的Day3(1/23)"></a>差點遲到的Day3(1/23)</h3><p>居然睡過頭了QQ但趕上了第三班6:00的公車，因此來不及用電腦裡的頭貼為昨天要選拔賽的我送上祝福(?<br>據說這選拔賽的全名是2019新北市國際資訊奧林匹亞研習營初選資格選拔(?<br>差10分鐘遲到，匆匆忙忙得趕上後聽說今天教圖論&amp;二分<br>再來驚喜的是親眼遇見大神們陳威翰和蘇柏瑄(架CMS辛苦了&gt;&lt;)<br>題目有5題</p>
<hr>
<p>PA:單純的stack&amp;queue(100%)</p>
<p>PB:題目包裝得很漂亮，拆開來是我曾經精神AC卻沒實做過的LCS(100%)</p>
<p>PC:想了想，原本想說跟TIOJ 的Comiket一樣左加1，(右+1)減1 直接掃過去，但紙張上畫一畫發現會爛掉(? 所以突發奇想想起今天教了binary search，所以我就開了pair反過來二分搜，結過記憶體爛掉(27%)</p>
<p>PD:給一張格子圖，求某位置通過一些點到達目的的最短總長。(0%)</p>
<p>PE:並查集(精神100%)</p>
<p>過程:<br>前14分鐘寫完PA，由於精神不濟刻出來的code，讓我自己為了寫成2個stack就耍向de了許久，精神恢復了(100get)，發現PB敘述好長，大約看了一下就跳去看PC了，如上述PC的題目敘述一般，我埋頭苦幹了直到剩不到1小時，算了(27get)，趕快看PB &amp; PE，恩……PB看了看，這規律有一種既是感，LCS!(100get) 但剩下的十分鐘，就算知道PE是裸裸的disjoint set，我也無可奈何的沒完成~總計227/500，頗糟的，比預期的低100分QAQ</p>
<hr>
<p>題目:<a href="https://drive.google.com/open%E2%80%A6">https://drive.google.com/open…</a></p>
<hr>
<ul>
<li>第8名，加油~少年!!!</li>
<li>成功進入複選資格~~</li>
<li>板中包了前5名……NDDWFF(QAQ)</li>
<li>我IOI CAMP 慘了……要請掉兩天去複選進階班培訓</li>
<li>初階結束了，資料夾、隨身碟、蝸牛老師的講義&amp;一堆巧顆力GET~!!!</li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>新北市TOI</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title>NCPC 初賽 2020心得</title>
    <url>/2020/09/27/2020%20NCPC%E5%88%9D%E8%B3%BD%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>難得這次我有賽中把題目看完</p>
<hr>
<h2 id="以下題敘"><a href="#以下題敘" class="headerlink" title="以下題敘"></a>以下題敘</h2><p>PA : r=qx+py，給正整數r,p,q，求|x|+|y|最小 (r&lt;pq &amp; r&lt;10^9 assume that 1&lt;p,q&lt;10^9)</p>
<p>PB : 奇數魔方陣。給定第一列數字，把整個大小n^2的魔方陣求出。(魔方陣：每行、列、主副對角線個別和相等) (n&lt;=5 &amp; n is odd)</p>
<p>PC : 給一棵帶邊權的樹，n個節點，修改q次邊權Wij，求出每次修改後最遠的兩點。(n&lt;=1500 &amp; q&lt;=20 &amp;&amp; &lt;=10筆測資 &amp;&amp; W&lt;=10000)</p>
<p>PD : 有一個以大寫字母組成長度&lt;10^4的字串，以星號(*)結尾。總共有兩次的變動，第一次為「將最後一個字母丟到第一個，重複n-1次」，第二次為「將原字串與n-1個字串以字典序排序」，然後依序取每個字串的最後一個字母。<br>現在給定一字串為「每個字串的最後一個字母」，請推出原字串為何。</p>
<p>PE : 給定一個大小為n^2陣列L，n&lt;1000，L[i][j]表示i與j相鄰的距離(L[1][2]=1 L[1][3]=2 L[2][3]雖然可以間接走到，但沒有相鄰因此為無限大)，題序為全點對最短情況下modify一邊權後響多少點對被變更(變更使得維持全點對最短)(0&lt;邊權&lt;2^32)</p>
<p>PF : 給m,n表示1~m中任意數量數字和=n，有全部列出，無則輸出-1 (m&lt;=n &amp; 8&lt;=n&lt;=30 &amp; 共10筆測資)</p>
<p>PG : 給定d[0][0]，用下面圖片那串建一個(N-1)*(M-1)的table，給A,B,L取max(左上d[A][B]與右下d[A+L-1][B+L-1]的矩形範圍內相鄰差)</p>
<h2 id="今日總過程"><a href="#今日總過程" class="headerlink" title="今日總過程"></a>今日總過程</h2><p><a href="https://theriseofdavid.github.io/">江大衞</a> 昨天半夜來我家吃宵夜、改Codebook，還有互相打氣(?<br>隔天10點快半跟原齊、文元會合吃早(午)餐，然後買了電瓶-&gt;(茶)<br>進考場後說甚麼不能動電腦跟鍵盤，欸欸，都已經12:43了，剩17分鐘就要考了，說好的30分鐘測機呢？其他組去問都沒有用，然後我就上前去跟考官抗議，嗆到他一句回不出時他就摸摸鼻子去跟隔壁間考官說上台宣布開始測機(只剩15分鐘)。<br>宣布時有說到有提供印表機，但途中印表機卡紙(問題真多啊= = )<br>我快速的把全部題目看過，PF文元跟原齊正在解，我發現PD是前年新北市賽那題(「外星人的訊息」，解法我記得是BWT(Burrows–Wheeler Transform))，但我當年沒好好研究這算法(抓到，當年我喇部份分。子權你再不好好訂正啊!)，只好憑印象跟隊友說解法(因為事先說好我這次不會上機(怕我毒瘤code))。<br>快2小時過去，PF WA了兩次AC了，「中間時段」原齊也有把PD刻好了，<br>「中間時段」為-&gt;討論PD跟PC的解法，PC這題我跟文元說是樹直徑，但他說這題帶權重，我不好好的證明就放棄了這個念頭(如果我的實力好一點而且會在場上細心證明的話這題就AC了)。然後文元覺得是樹鏈剖分套BIT拉出每一條，雖然聽起來合理，但後來看Scoreboard得知很多人AC，發覺這題應該沒那麼毒瘤。<br>原齊把PD上傳後吃了WA，後來手動列出很多比測資都還是不知道哪裡假解<br>而PE跟PG我覺得很勞動而且PG的多次查詢範圍相臨差最大想不到優質的解法，所以都skip<br>PB跟PA也想不到好的解法，於是整場大燒機!!~~</p>
<h3 id="比賽結束"><a href="#比賽結束" class="headerlink" title="(比賽結束)"></a>(比賽結束)</h3><hr>
<h2 id="想法與心得"><a href="#想法與心得" class="headerlink" title="想法與心得"></a>想法與心得</h2><p>賽後我直接問 江文吉 PC怎麼AC的，他的隊友跟我說是樹直徑。<br>文元認為整個團隊還沒配合的很好，原齊跟我認為是實力不夠導致PA想不到是「擴展歐幾里得」(而且也不知道這是什麼)，還有PC沒法好好證明帶邊權樹直徑DFS兩次的正確性，後來文元很直白跟我說我都在吃老本、沒在動腦，看到題目就會翻以前解過哪些相似的並困在那思路中，更何況題目都會變化。<br>但我認為我還是得好好地刷題，刺激不同且新的思路還有把想法轉為code並穩定輸出，原齊則想往快速開題還有數論發展。</p>
<h2 id="個人感想"><a href="#個人感想" class="headerlink" title="個人感想"></a>個人感想</h2><p>由於高中時期我幾乎是一人獨來獨往，組隊是用湊人頭的，很少有多次合作並賽後檢討的機會，更何況我都不知道我的「團隊配合」與「解題思路」有這麼多需要改進(真的直到文元指出我才知道)，這次多人正式賽真的學到了不少，希望兩位能繼續收留我QAQ</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>NCPC</tag>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>TOPC 2020 比賽心得</title>
    <url>/2020/10/29/2020%20TOPC%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="2020-TOPC-心得"><a href="#2020-TOPC-心得" class="headerlink" title="2020 TOPC 心得"></a>2020 TOPC 心得</h1><p>比賽時間：2020/10/07 18:00~21:00</p>
<h2 id="題目：url"><a href="#題目：url" class="headerlink" title="題目：url"></a>題目：<a href="https://drive.google.com/drive/folders/1ikFKK3SGxzTAaWQKvkGr0NVSaBqL4T7c"><strong>url</strong></a></h2><p>雖然算是遲到的心得，但我還是得紀錄一下 OwO<br>隊友: <a href="https://blog.jw910731.wtf/">吳文元</a> 余原齊</p>
<h2 id="小抱怨"><a href="#小抱怨" class="headerlink" title="小抱怨"></a>小抱怨</h2><ul>
<li>理圖圖書館的印表機真的爛到炸 OAO</li>
<li>我超爛，SAD</li>
<li>OJ可能是在金費之下的受害者，但真正受害者的是我們比賽的人 -&gt; 一題可以給我judging快20分鐘。Orz</li>
<li>沒有penalty。</li>
<li>上述兩點加起來根本就是今年比賽的主打，SAD<h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2>pI是簽到題，bj4<br>pA在某種程度下也是簽到題，因為只要先回到(0,0)，在按照題目輸出即可。<br>之後我根原齊在某種奇怪的量子糾纏之下一人一半把pB給AC了(他寫上半部(fold)，我寫下半部(overlapping condition)) -&gt; 過程中我把condition寫成了噁心的巢狀結構，然後因為了1個變數忘了修改而debug了幾百年(拖時間大師is me)。<h3 id="以下是沒解開的"><a href="#以下是沒解開的" class="headerlink" title="以下是沒解開的"></a>以下是沒解開的</h3>pC 我們想不到<strong>多點同速率擴張圓</strong>的最寫法，文元原本想要寫最近點對，但沒以實做的想法。<br>pD 是聽了學長的解後才恍然大悟的數學幾何題。<br>pG 我以為是貪婪加二分圖，之後以為是匹配，但之後看了fb上大老們的心得文後才知道這題是<strong>二分圖最大點獨立集</strong>。<br>pEFHJ 我都沒看QQ<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2>名次：52/146<br>整場打下來配合度雨默契有比上次NCPC還要好，但我們的實力與刷題量皆不足，我們事後也有分配我們的合作模式與個人專項(擅長的算法)衝刺。<br>雖然以為沒有進ICPC而感到失望，但幾天後的遞補信又讓我重拾了鬥志與信心<br>ICPC Taipei on Site 加油吧～</li>
</ul>
<p><img src="https://i.imgur.com/WNIq9bK.jpg" loading="lazy"></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>TOPC</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 1864 - 最大报销额</title>
    <url>/2021/08/14/HDU%201864%20-%20%E6%9C%80%E5%A4%A7%E6%8A%A5%E9%94%80%E9%A2%9D/</url>
    <content><![CDATA[<p>題目連結： <a href="https://vjudge.net/problem/HDU-2955">這裡</a></p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul>
<li>小細節：<ul>
<li>單張帳單只能出現 A 或 B 或 C </li>
<li>單張帳單不能超過 1000 元</li>
<li>單張帳單中的 A 或 B 或 C 總和不能超過 600 元</li>
</ul>
</li>
<li>轉移方程： <code>dp[j] = max(dp[j], dp[j - 1] + cost[i]</code> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CN</span> <span class="token expression">cout<span class="token operator">&lt;&lt;</span></span><span class="token string">"\n"</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> TC<span class="token punctuation">,</span> N<span class="token punctuation">;</span>
    <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> Q<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> Q <span class="token operator">>></span> TC <span class="token operator">&amp;&amp;</span> TC<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> cost<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> TC<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">double</span> id<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token keyword">bool</span> det <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            cin <span class="token operator">>></span> N<span class="token punctuation">;</span>
            <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cin <span class="token operator">>></span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">>></span> tmp <span class="token operator">>></span> c<span class="token punctuation">;</span> <span class="token comment">//set(n) 讀 n 個字元進 tmp</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'B'</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'C'</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>
                <span class="token keyword">else</span> det <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">600</span> <span class="token operator">||</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">600</span> <span class="token operator">||</span> id<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">600</span> <span class="token operator">||</span> det <span class="token operator">||</span> id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> id<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> id<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> TC<span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> TC<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cout <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>Dynamic Programming (DP)</tag>
        <tag>0/1 背包問題</tag>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 2955 - Robberies</title>
    <url>/2021/08/14/HDU%202955%20-%20Robberies%20/</url>
    <content><![CDATA[<p>題目連結： <a href="https://vjudge.net/problem/HDU-2955">這裡</a></p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul>
<li>如果是用正常 0/1 背包的思維構造，會發現這題的風險 (重量) 是小數，無法以重量做狀態轉移。</li>
<li>換個思路，把風險變成 <code> 1 - 風險（重量）</code> ，也就是 <strong>成功率</strong> 。</li>
<li>轉移式： <code>dp[i]=max(dp[j], dp[j-cost[i]]*weight[i])</code><br>  因為已將題意轉為 <strong>成功率</strong> ，所以連續地成功是用乘法。</li>
<li>最後取大於原『成功率』的最大 cost 即可。</li>
</ul>
<h2 id="AC-原始碼"><a href="#AC-原始碼" class="headerlink" title="AC 原始碼"></a>AC 原始碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
	<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
	<span class="token keyword">double</span> P<span class="token punctuation">;</span>
	cin <span class="token operator">>></span> T<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> cost<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot_w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">double</span> weight<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
		cin <span class="token operator">>></span> P <span class="token operator">>></span> n<span class="token punctuation">;</span>
		dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//不搶就必定成功</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cin <span class="token operator">>></span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//轉成成功的機率</span>
			tot_w<span class="token operator">+=</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>tot_w<span class="token punctuation">;</span>j<span class="token operator">>=</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>tot_w<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">1</span><span class="token operator">-</span>P<span class="token punctuation">)</span> tmp<span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token comment">//成功率大於原定的，表示成功</span>
		cout <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>Dynamic Programming (DP)</tag>
        <tag>0/1 背包問題</tag>
        <tag>2021</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1152 銀河帝國旅行社</title>
    <url>/2019/02/22/TIOJ%201152%20%E9%8A%80%E6%B2%B3%E5%B8%9D%E5%9C%8B%EF%A6%83%EF%A8%88%E7%A4%BE/</url>
    <content><![CDATA[<p>題目連結:<a href="https://tioj.ck.tp.edu.tw/problems/1152">https://tioj.ck.tp.edu.tw/problems/1152</a></p>
<p>“樹直徑”定義:一顆樹上任兩點距離最大<br>這是一題裸裸的樹直徑題，不難發現dfs一次找到最遠點，再用那個點當作第二次dfs的根，再找一次最遠點，不外乎就是樹直徑(很greedy的想法(?)。</p>
<p>PS:我的code超爛，ranklist超後面QAQ</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">po</span> <span class="token expression">pop_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">F</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression">second</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CN</span> <span class="token expression">cout<span class="token operator">&lt;&lt;</span></span><span class="token string">"\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">1000005</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">lson</span> <span class="token expression"><span class="token keyword">int</span> lson<span class="token operator">=</span>index<span class="token operator">*</span><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rson</span> <span class="token expression"><span class="token keyword">int</span> rson<span class="token operator">=</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mid</span> <span class="token expression"><span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans_s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>root<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">fill</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span>vis<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>v<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>ans_s<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ans_p<span class="token operator">=</span>now<span class="token punctuation">;</span>
        ans_s<span class="token operator">=</span>sum<span class="token punctuation">;</span>
        <span class="token comment">//cout &lt;&lt; ans_s &lt;&lt;" " &lt;&lt; ans_p &lt;&lt;"\n";</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> a <span class="token operator">&amp;&amp;</span> a<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> root<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//cout &lt;&lt;"s="&lt;&lt; ans_s &lt;&lt;" p=" &lt;&lt; ans_p &lt;&lt;"\n";</span>
    <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>ans_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans_s <span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>2019</tag>
        <tag>TIOJ</tag>
        <tag>樹直徑</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1312 家族</title>
    <url>/2018/12/19/TIOJ%201312%20%E5%AE%B6%E6%97%8F/</url>
    <content><![CDATA[<p>雖然有一點煩(連續輸入我看漏了)，但只是裸裸的dsu題(模板+1/0)<br>據說我是題目連結(?  <a href="https://tioj.ck.tp.edu.tw/problems/1312">https://tioj.ck.tp.edu.tw/problems/1312</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">gcc <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">"o2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOS</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TO</span> <span class="token expression">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">disjointset</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mem<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rank<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mem<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">==</span>N<span class="token punctuation">)</span> <span class="token keyword">return</span> N<span class="token punctuation">;</span>
        <span class="token keyword">return</span> mem<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>mem<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">find</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mem<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rank<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">find</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    IOS<span class="token punctuation">;</span>TO<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">disjointset</span> dsu<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        dsu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
            dsu<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    cin <span class="token operator">>></span> k<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> dsu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>TIOJ</tag>
        <tag>並查集</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title>Timus Online Judge 1297.Palindrome</title>
    <url>/2021/08/18/Timus%20Online%20Judge%201297.Palindrome/</url>
    <content><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>Manacher 模板題，要先了解 Manacher 演算法的原理</li>
<li>最後不是求長度，但我們可以將回文的 <code>center</code> 的位置以及回文長度 <code>mpl (max_palindrome_len)</code> 回傳，印出 $center-mpl \leq i \leq center+mpl-1 $  (s[i] $\neq$ ‘#’)</li>
</ul>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><p><a href="https://www.youtube.com/watch?v=nbTSfrEfo6M&ab_channel=IDeserve">[Youtube] Longest Palindromic Substring O(N) Manacher’s Algorithm</a></p>
<h2 id="AC-原始碼"><a href="#AC-原始碼" class="headerlink" title="AC 原始碼"></a>AC 原始碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxEP</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
VI <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PII <span class="token function">manacher</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Center <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> R <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mirror <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> Center <span class="token operator">-</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> p<span class="token punctuation">[</span>mirror<span class="token punctuation">]</span> <span class="token operator">&lt;</span> R<span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>mirror<span class="token punctuation">]</span><span class="token punctuation">,</span> R <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            Center <span class="token operator">=</span> i<span class="token punctuation">;</span>
            R <span class="token operator">=</span> i <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token function">maxE</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxEP</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//jizz;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string s<span class="token punctuation">,</span> new_s<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        new_s <span class="token operator">+=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>
        new_s <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    new_s <span class="token operator">+=</span> <span class="token string">"#$"</span><span class="token punctuation">;</span>
    PII max_pa<span class="token operator">=</span><span class="token function">manacher</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pa_len<span class="token operator">=</span>max_pa<span class="token punctuation">.</span>first<span class="token punctuation">,</span> pos<span class="token operator">=</span>max_pa<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    <span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>pos<span class="token operator">-</span>pa_len<span class="token punctuation">,</span>pos<span class="token operator">+</span>pa_len<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>new_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'#'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> new_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>Timus Online Judge</tag>
        <tag>Manacher Algorithm</tag>
        <tag>最長回文字串</tag>
        <tag>Palindrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Uva10534 - Wavio Sequence</title>
    <url>/2021/08/06/Uva10534%20-%20Wavio%20Sequence/</url>
    <content><![CDATA[<p><strong>題目連結: <a href="https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1475">這裡</a></strong></p>
<h2 id="題目大意"><a href="#題目大意" class="headerlink" title="題目大意"></a>題目大意</h2><blockquote>
<p>Wavio sequence 的定義 :</p>
<ul>
<li>長度為 $2n+1$ </li>
<li>前 $n+1$ 個必為嚴格遞增</li>
<li>後 $n+1$ 個必為嚴格遞減</li>
</ul>
<p>輸入測資不大於 75 筆，每一筆給定長度為 N ( $1\leq N\leq 10000$ ) 的數列，請在數列中找出<strong>最長 Wavio sequence</strong></p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>$O(n^2)$ 的 LIS 一定會 TLE，因此使用精簡的 Robinson-Schensted-Knuth Algorithm </li>
</ul>
<p><strong>Robinson-Schensted-Knuth Algorithm</strong></p>
<blockquote>
<p>使用 Greedy 策略，並以二分搜加速，時間複雜度為 $O(NlogL)$</p>
</blockquote>
<ul>
<li>前半段是 LIS，後半段是 LDS</li>
<li>利用 LIS 從左至右、從右至左各做一次</li>
<li>邊建構 LIS 邊將長度記錄下來</li>
<li>將 LIS 和 LDS 的長度陣列相同斷點的值取 $max(min(LIS[i] , LDS[i])*2+1)$ 即可</li>
</ul>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><p><a href="https://web.ntnu.edu.tw/~algo/Subsequence.html#3">臺師大演算法筆記-LIS</a></p>
<h2 id="AC-原始碼"><a href="#AC-原始碼" class="headerlink" title="AC 原始碼"></a>AC 原始碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O3"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token operator">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">emplace_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LEN</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">F</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression">second</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LB</span> <span class="token expression">lower_bound</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UP</span> <span class="token expression">upper_bound</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CN</span> <span class="token expression">cout<span class="token operator">&lt;&lt;</span></span><span class="token string">"\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//#define int long long</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> LD<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> PIII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span> LL<span class="token operator">></span> PLL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>  
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>LL<span class="token operator">></span> VLL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PLL<span class="token operator">></span> VPLL<span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//jizz;</span>
    <span class="token comment">//freopen("out.txt", "w", stdout);</span>
    <span class="token comment">//freopen("in.txt", "r", stdin);</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">,</span>v1<span class="token punctuation">;</span>
    	<span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>pos1<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>fl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    	<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span> cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    	v<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	    cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    	    <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    	<span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    		<span class="token keyword">int</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    		<span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    			v<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
				pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>fl<span class="token punctuation">;</span>
	        <span class="token punctuation">&#125;</span>
    		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    			<span class="token operator">*</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>
				pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fl<span class="token punctuation">;</span>	
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		v1<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    		<span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">></span> v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    			v1<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
				pos1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>fl<span class="token punctuation">;</span>	
			<span class="token punctuation">&#125;</span> 
    		<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
				<span class="token operator">*</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>
				pos1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fl<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//REP(i,n) cout &lt;&lt; pos[i] &lt;&lt; " ";CN;</span>
		<span class="token comment">//REP(i,n) cout &lt;&lt; pos1[i] &lt;&lt; " ";CN;</span>
		<span class="token keyword">int</span> maxu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>vs<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v1s<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token function">min</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pos1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">></span> maxu <span class="token operator">?</span> maxu<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pos1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> maxu<span class="token operator">=</span>maxu<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> maxu <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>Dynamic Programming (DP)</tag>
        <tag>2021</tag>
        <tag>UVA</tag>
        <tag>最長遞增子序列 (LIS)</tag>
      </tags>
  </entry>
  <entry>
    <title>Uva10917 - Walk Through the Forest</title>
    <url>/2021/08/16/Uva10917%20-%20Walk%20Through%20the%20Forest/</url>
    <content><![CDATA[<p><strong>題目連結: <a href="https://vjudge.net/problem/UVA-10917">這裡</a></strong></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>注意這句： <blockquote>
<ul>
<li>He considers taking a path from A to B to be progress if there exists a route from B to his home that is shorter than any possible route from A.</li>
<li>( A , B ) 為了找存在一條從 B 出發，比『所有』從 A 出發回家的路還短，求這種路有幾條。</li>
</ul>
</blockquote>
</li>
<li>這題要尋找符合題目所敘的所有回到家裡的路徑，如果利用 Dijkstra 進行單源搜索，反過來以家裡為起點做 Dijkstra 會恰好得到我們想要的結果。</li>
<li>再來就是利用 DFS 將符合的路徑 ( dist [ $\forall$A ] &lt; dist [ B ] ) 用一個陣列存取，就有一種 DP 的味道了。</li>
</ul>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><p><a href="https://blog.csdn.net/ccsu_cat/article/details/80868520">[CSDN] UVA 10917 Walk Through the Forest 迪杰斯特拉+记忆化搜索</a></p>
<h2 id="AC-原始碼"><a href="#AC-原始碼" class="headerlink" title="AC 原始碼"></a>AC 原始碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">region define<span class="token operator">/</span><span class="token keyword">typedef</span></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion</span></span>
VPII adj<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dist<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PII<span class="token operator">>></span> pq<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//從終點做單源最短有利於從其他點求到終點最短路</span>
    pq<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        PII now <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//if(dist[now.first]!=now.second) continue;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>now<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> now_node <span class="token operator">=</span> now<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> adj<span class="token punctuation">[</span>now_node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//i.first: 點   i.second: 權重</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>now_node<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                dist<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>now_node<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
                pq<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//  為了找存在一條從 B 出發，比『所有』從 A 出發回家的路還短，求這種路有幾條。</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cin <span class="token operator">>></span> m<span class="token punctuation">;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> w<span class="token punctuation">;</span>
            adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            adj<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>UVA</tag>
        <tag>Dijkstra</tag>
        <tag>最短路徑</tag>
        <tag>DFS</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Uva10949 - Kids in a Grid</title>
    <url>/2021/08/06/Uva10949%20-%20Kids%20in%20a%20Grid/</url>
    <content><![CDATA[<p><strong>題目連結: <a href="https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=1890">這裡</a></strong></p>
<h2 id="題目大意"><a href="#題目大意" class="headerlink" title="題目大意"></a>題目大意</h2><blockquote>
<ul>
<li>輸入大小為 $H \times W$的二維字串 $(1\leq H,W\leq 20)$</li>
<li>有兩個人利用東西南北拜訪二維字串(往一個方向走一單位，並保證走法是合法的(不會走出邊界)) </li>
<li>輸入 $N$ , $X_0$ , $Y_0$ ，接下來從 ($X_0$, $Y_0$) 開始走 $N$ 步 ($1$ $\leq$ $X_0$ $\leq$ $H,$ $1$ $\leq$ $Y_0$ $\leq$ $W,$ $1$ $\leq$ $N$ $\leq$ $20000$)</li>
<li>將兩個人最長共同子序列印出</li>
</ul>
<p>輸入測資不大於 15 筆</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>$O(NM)$ 的 LCS 一定會 TLE，因此使用 Hunt-Szymanski Algorithm 把 LCS 轉化成 LIS</li>
<li>再將 LIS 用 Robinson-Schensted-Knuth Algorithm 所得 <strong>LIS 長度 $=$ LCS 長度</strong></li>
</ul>
<p><strong>Hunt-Szymanski Algorithm</strong></p>
<blockquote>
<p>步驟如下:</p>
<ul>
<li>將 s1 每個字元的位置用 <code>vec[128]</code> 存起來</li>
<li>將每個字元所對應的位置由大到小排序</li>
<li>把 s2 所有字元換成 <code>vec[128]</code> 的位置，形成儲存所有位置的 <code>arr</code> 一維數列 </li>
<li>算出 arr 的 LIS 長度即為原 LCS 長度</li>
</ul>
<p>舉個例子:</p>
<ul>
<li>s1[]=”abcaabbc”, s2=”abbacadbc”</li>
<li>紀錄 s1 每個字元所出現的位置<ul>
<li>a: 0,3,4 -排列後–&gt; 4,3,0</li>
<li>b: 1,5,6 -排列後–&gt; 6,5,1</li>
<li>c: 2,7 -排列後–&gt; 7,2</li>
<li>d: </li>
</ul>
</li>
<li>將 s2 的字元換成上一步中所對應的數字<ul>
<li>“abbacadbc”={4,3,0,6,5,1,6,5,1,4,3,0,7,2,4,3,0,6,5,1,7,2}</li>
<li>{0,1,2,3,5,7}，長度為 6，包含真正的 {0,1,3,4,6,7}</li>
</ul>
</li>
</ul>
<p>時間複雜度 $O($ 數對位置數目$\times$ $min(N,M)$$)$<br>最差情況 s1=”aaa…aa”, s2=”aaa…aa”，退化成 $O(N^2logN)$，比 $O(N^2)$ 的 LCS 更差，所以要看時機使用</p>
</blockquote>
<p><strong>Robinson-Schensted-Knuth Algorithm</strong></p>
<blockquote>
<p>使用 Greedy 策略，並以二分搜加速，時間複雜度為 $O(NlogL)$</p>
<ul>
<li>前半段是 LIS，後半段是 LDS</li>
<li>利用 LIS 從左至右、從右至左各做一次</li>
<li>邊建構 LIS 邊將長度記錄下來</li>
<li>將 LIS 和 LDS 的長度陣列相同斷點的值取 $max(min(LIS[i] , LDS[i])*2+1)$ 即可</li>
</ul>
</blockquote>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><p><a href="https://www.csie.ntu.edu.tw/~sprout/algo2019/ppt_pdf/week07/dynamic_programming_2_1.pdf">臺大資訊之芽 - LIS/LCS</a></p>
<h2 id="AC-原始碼"><a href="#AC-原始碼" class="headerlink" title="AC 原始碼"></a>AC 原始碼</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O3"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token operator">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">emplace_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LEN</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">F</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression">second</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LB</span> <span class="token expression">lower_bound</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UP</span> <span class="token expression">upper_bound</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CN</span> <span class="token expression">cout<span class="token operator">&lt;&lt;</span></span><span class="token string">"\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//#define int long long</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">double</span> LD<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> PIII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span> LL<span class="token operator">></span> PLL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>  
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>LL<span class="token operator">></span> VLL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PLL<span class="token operator">></span> VPLL<span class="token punctuation">;</span>
<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">generate_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> Step<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> fl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'N'</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>fl<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'E'</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>fl<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'S'</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>fl<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'W'</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>fl<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//jizz;</span>
	<span class="token comment">//freopen("out.txt", "w", stdout);</span>
    <span class="token comment">//freopen("in.txt", "r", stdin);</span>
	cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
	<span class="token function">REP1</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> Step<span class="token punctuation">,</span>Step1<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> table<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span>LIS_table<span class="token punctuation">,</span>LIS<span class="token punctuation">;</span>
		<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>b<span class="token punctuation">)</span> cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		cin <span class="token operator">>></span> Step <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Step<span class="token punctuation">)</span> cin <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token function">generate_string</span><span class="token punctuation">(</span>Step<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cin <span class="token operator">>></span> Step1 <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Step1<span class="token punctuation">)</span> cin <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token function">generate_string</span><span class="token punctuation">(</span>Step1<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Step<span class="token operator">++</span><span class="token punctuation">;</span>Step1<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Step<span class="token punctuation">)</span> table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Step1<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span>table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> LIS_table<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>LIS_table<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d %d\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>Step<span class="token punctuation">,</span>Step1<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> len<span class="token operator">=</span>LIS_table<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		LIS<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>LIS_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> tmp<span class="token operator">=</span>LIS_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>LIS<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>tmp<span class="token punctuation">)</span> LIS<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token operator">*</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>LIS<span class="token punctuation">)</span><span class="token punctuation">,</span>LIS_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span>LIS_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">int</span> LIS_len<span class="token operator">=</span>LIS<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d %d\n"</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>Step<span class="token operator">-</span>LIS_len<span class="token punctuation">,</span>Step1<span class="token operator">-</span>LIS_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>Dynamic Programming (DP)</tag>
        <tag>2021</tag>
        <tag>UVA</tag>
        <tag>最長遞增子序列 (LIS)</tag>
        <tag>最長共同子序列 (LCS)</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CPTC 心得</title>
    <url>/2020/12/17/%5B2020%20CPTC%20%E5%BF%83%E5%BE%97%5D/</url>
    <content><![CDATA[<h1 id="CPTC-心得"><a href="#CPTC-心得" class="headerlink" title="CPTC 心得"></a>CPTC 心得</h1><p>題目在<a href="https://drive.google.com/drive/folders/1ajpjsjsR_dzitV-5PMmbXPFg3XNhVGm_?usp=sharing">這裡</a>,就跳過題序了QAQ</p>
<h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p>三個完全還沒進入狀況的人：我,吳文元,余原齊被一開始登不進去的DOMjudge嚇到，於是發現team的編號從3位數多加了2000（？並延後15分鐘開始。</p>
<h2 id="正式開始-18-15"><a href="#正式開始-18-15" class="headerlink" title="正式開始 (18:15)"></a>正式開始 (18:15)</h2><p>原齊看pA,我看pB,文元去了廁所（？<br>後來調成我看pA<br>我先有了<code>map</code>+計數+discretization的想法，然後原齊和文元覺得pB是水題，於是原齊就快速讓它AC掉（？<br>後來我發現我在實做上<code>idx</code>的discretization卡住了，而且還用了<code>map&lt;int,pair&lt;int,int&gt;&gt;</code>分別紀錄<code>aij</code>,<code>cnt</code>,<code>prefix</code>，文元來用板書幫我把思緒整理過一遍，順便提醒我map的複雜度很爛$O(nlog(len))$。<br>(今天的我狀況極差QAQ)<br>然後好好的做出了我上面那三個想法，但一直爛掉，我把原齊和文元找來，確認都有好好做事，後來才發現在最後二分搜時要用<code>upper_bound-1</code>而非<code>lower_bound</code>，並AC了這題。<br>後來文元在刻pD，原齊告訴我pC,pE的題序，我馬上說pE是數位DP，但我沒有學過(very sad)，然後pC沒想法。<br>此時原齊想說要不要用數學的方式解pE，但始終想不出規律，於是一起幫文元想pD。<br>pD: 一棟樓1001層，有三顆只有超過其承受高度才會破掉且一樣的蛋，並從第<code>n</code>層往下丟，尋找蛋的確切硬度。尋找次數$\leq30$。<br>他們當時的想法是LCA倍增，但LCA是倒著做的，所以卡住。<br>我當時還不知道這是互動題，我就跟原齊說兩頭都倍增，壓縮<code>L</code>,<code>R</code>的範圍，如果已知會破就不做，不會破就可以將左邊界快速向右移。但當時文元一聽到就很生氣的說絕對行不通，我想嘗試說明給他聽，卻被文元直接插斷說：「不是你算法的問題，是你腦袋的問題！」我心態瞬間崩掉，直接去廁所消氣，回來繼續想其他方法。(說白的就是我欠嘴，不然我不會變強OwO)<br>(常打FPS都知道互嘴是正常的(畢竟台灣人不嘴不會變強OwO)，但心態崩時會繼續爭吵不休，甚至會賭氣，進而影響整支隊伍)<br>回來想一段時間後，我說：不然先二分搜直到第一顆蛋破掉，我們至少可以在第一顆蛋砍掉一半長，接下來留兩顆做你們的倍增。<br>後來又把第三顆蛋的狀態改掉，最後三人一起調整後統整如下：<br>第一顆：二分搜直到破掉<br>第二顆：倍增到$\frac{L+R}{2}$就回到從+1重新倍增<br>第三顆：+1直到結束<br>但直到Contest Over依舊WA<br>直到看了題解才知道有$(log10^3)\times10$的分10份想法。</p>
<h2 id="結束-21-15"><a href="#結束-21-15" class="headerlink" title="結束 (21:15)"></a>結束 (21:15)</h2><h3 id="pA-AC"><a href="#pA-AC" class="headerlink" title="pA (AC)"></a>pA (AC)</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> str<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ct<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>q<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">*</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>
        mp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> fl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>qu<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ct<span class="token punctuation">[</span>fl<span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token operator">-></span>first<span class="token punctuation">;</span>
        str<span class="token punctuation">[</span>fl<span class="token punctuation">]</span><span class="token operator">+=</span>it<span class="token operator">-></span>second<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fl<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>fl<span class="token punctuation">]</span><span class="token operator">+=</span>str<span class="token punctuation">[</span>fl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        fl<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> qu<span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>pos<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span> ct<span class="token operator">+</span>fl<span class="token punctuation">,</span> qu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>pos<span class="token operator">-</span>ct<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="pB-AC"><a href="#pB-AC" class="headerlink" title="pB (AC)"></a>pB (AC)</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> g<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
        <span class="token operator">++</span>g<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>g<span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> g <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">sort</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> t <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans <span class="token operator">+=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="pD-WA"><a href="#pD-WA" class="headerlink" title="pD (WA)"></a>pD (WA)</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">TEST</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EB</span> <span class="token expression">emplace_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MP</span> <span class="token expression">make_pair</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">X</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Y</span> <span class="token expression">second</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> ll <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> llu <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">unsigned</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> pii <span class="token operator">=</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token comment">/************************/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> R<span class="token punctuation">,</span> mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [l, r)</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// tumor egg throw</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">-</span>cnt <span class="token operator">></span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    		<span class="token keyword">goto</span> TUMOR<span class="token punctuation">;</span>
    	<span class="token punctuation">&#125;</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"! "</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    	<span class="token punctuation">&#125;</span>
    	<span class="token comment">// SAFE</span>
    	<span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"? "</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    	string s<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"SAFE"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        	l <span class="token operator">=</span> m<span class="token punctuation">;</span>
        	m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// normal</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">-</span>cnt <span class="token operator">>=</span> r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    		<span class="token keyword">goto</span> TUMOR<span class="token punctuation">;</span>
    	<span class="token punctuation">&#125;</span>
    	<span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"? "</span> <span class="token operator">&lt;&lt;</span> l<span class="token operator">+</span>mul <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        string s<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"SAFE"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">+</span>mul <span class="token operator">></span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
        		l <span class="token operator">=</span> l<span class="token operator">+</span>mul<span class="token punctuation">;</span>
        		mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        		m <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        	<span class="token punctuation">&#125;</span>
        	<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
				mul <span class="token operator">=</span> mul <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        	<span class="token punctuation">&#125;</span>
      	<span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        	r <span class="token operator">=</span> l<span class="token operator">+</span>mul<span class="token punctuation">;</span>
        	l <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>mul<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	m <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        	mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    TUMOR<span class="token operator">:</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	<span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"? "</span> <span class="token operator">&lt;&lt;</span> l<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    	string s<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"SAFE"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        	<span class="token operator">++</span>l<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"! "</span> <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul>
<li>名次: 43/94</li>
<li>AC: 2/5</li>
<li>WA: 1</li>
<li>Penalty:111</li>
<li>文元使用goto，然後整個人變得很母湯www</li>
<li>Sad~檢討文就不發了，反正都知道我自己的問題出在那OwO</li>
</ul>
<p><img src="https://i.imgur.com/aAoKV8x.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>CPTC</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 NTNU 程式設計(二) 助教批改解釋 - 作業一</title>
    <url>/2023/04/06/%5B2023%20NTNU%20%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E4%BA%8C%5D%20%E5%8A%A9%E6%95%99%E6%89%B9%E6%94%B9%E8%A7%A3%E9%87%8B%20-%20%E4%BD%9C%E6%A5%AD%E4%B8%80/</url>
    <content><![CDATA[<h1 id="程設助教-judge-題目"><a href="#程設助教-judge-題目" class="headerlink" title="程設助教 judge 題目"></a>程設助教 judge 題目</h1><p>助教：蘇子權 SubaRya<br>題目：hw0101, hw0102</p>
<h2 id="hw0101"><a href="#hw0101" class="headerlink" title="hw0101"></a>hw0101</h2><ul>
<li><p><a href="https://drive.google.com/drive/folders/1CLwrxsU1n2BWhlOXzAFNrKAol8EbFAYn?usp=share_link">測資和 hw0101.c 的 link</a></p>
</li>
<li><p><a href="https://github.com/KutsunaSubaRya/NTNU_TA_Computer_Programming_II/tree/main/hw0101">GitHub hw0101</a></p>
</li>
<li><p>測資分數分配</p>
<ul>
<li>sunny case: 13 pt</li>
<li>other case: 7 pt</li>
</ul>
</li>
<li><p>透過 function 評分，見下表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">評測函式</th>
<th align="center">sunny case pt</th>
<th align="center">other case pt</th>
</tr>
</thead>
<tbody><tr>
<td align="center">strchr</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">strrchr</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">strspn</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">strcspn</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">strpbrk</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">strstr</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">strtok</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
</tbody></table>
<ul>
<li>sunny case</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">char str1[] &#x3D; &quot;SubaRya TA is handsome&quot;;
char str2[] &#x3D; &quot;Smallten and Mafumafu are cute&quot;;
char str3[] &#x3D; &quot;jw910731, LoveSnowEx, Smallten, SubaRya, NTNU students, also Computer Programming II TA, work hard&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>other case</p>
<ul>
<li>上面的 link 中 <code>.txt</code> 副檔名的檔案</li>
</ul>
</li>
<li><p>簡述</p>
<ul>
<li>sunny case 測資較小，從 <code>hw0101.c</code> 中可以看出來，這裡不多做說明。</li>
<li>other case 測資較大，透過 mmap 吃進 file 中的 content，進行評測。</li>
<li>有使用 <code>sigsetjmp</code>、<code>signal</code> 偵測 segmentation fault 或 infinite loop 的情形產生，以不會測到一半被 terminate 而沒測到後續的功能。</li>
</ul>
</li>
</ul>
<h2 id="hw0102"><a href="#hw0102" class="headerlink" title="hw0102"></a>hw0102</h2><ul>
<li><p><a href="https://drive.google.com/drive/folders/1LcKDQpS1l9onXI8V7QE9H-OCE6NDZkzk?usp=share_link">測資和 hw0102.c 的 link</a></p>
</li>
<li><p><a href="https://github.com/KutsunaSubaRya/NTNU_TA_Computer_Programming_II/tree/main/hw0102">GitHub hw0102</a></p>
</li>
<li><p>測資分數分配</p>
<ul>
<li>sunny case: 12 pt<ul>
<li>含一筆越界 position</li>
</ul>
</li>
<li>other case: 8 pt</li>
</ul>
</li>
<li><p>共 10 筆測資，每一筆兩分。</p>
</li>
<li><p>簡述</p>
<ul>
<li><code>generateTestcaseAndAns</code> folder 裡有用 python 寫的 generate testcase and answer 的程式，可以自行拿來檢測。</li>
<li>sunny case 測資較小，長度約略 100，透過 mmap 吃進 file 中的 content，評測後將結果與 <code>ans&lt;1~6&gt;.txt</code> 比對。</li>
<li>other case 測資較大，長度約略 2e7，透過 mmap 吃進 file 中的 content，評測後將結果與 <code>ans&lt;7~10&gt;.txt</code> 比對。</li>
<li>有使用 <code>sigsetjmp</code>、<code>signal</code> 偵測 segmentation fault 或 infinite loop 的情形產生，以不會測到一半被 terminate 而沒測到後續的功能。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>程式設計二助教</category>
      </categories>
      <tags>
        <tag>程式設計</tag>
        <tag>助教</tag>
        <tag>C</tag>
        <tag>2023</tag>
      </tags>
  </entry>
  <entry>
    <title>Better Discord 美化 Discord - ClearVision</title>
    <url>/2022/05/23/%5BBetter%20Discord%5D%20%E7%BE%8E%E5%8C%96%20Discord%20-%20Clear%20Vision/</url>
    <content><![CDATA[<p>先附上成品:</p>
<p><img src="https://i.imgur.com/0tWRzM5.jpg" loading="lazy"></p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h3><p>前往 Better Discord 官網下載 exe 檔案 : <a href="https://betterdiscord.app/">官網連結</a></p>
<h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux:"></a>Arch Linux:</h3><p><a href="https://aur.archlinux.org/packages/betterdiscordctl">AUR Arch Linux - betterdiscordctl</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yay -S betterdiscordctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>install betterdiscordctl</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ betterdiscordctl <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>下載 PluginRepo : <a href="https://betterdiscord.app/plugin/PluginRepo">PluginRepo 連結</a><br>下載後將此 Plugin 放進 BetterDiscord 資料夾</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ .config
$ BetterDiscord
$ <span class="token function">mv</span> ~/Downloads/*.plugin.* <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="挑選-Theme"><a href="#挑選-Theme" class="headerlink" title="挑選 Theme"></a>挑選 Theme</h2><p>我十分推薦 <a href="https://betterdiscord.app/theme/ClearVision">ClearVision - Theme</a></p>
<p>主要原因是:</p>
<ul>
<li>版面簡單</li>
<li>有網頁版的 <a href="https://bdeditor.dev/theme/clearvision">Theme Editor</a> 可以做預覽，不須用自己改 <code>.css</code> 檔</li>
</ul>
<h2 id="ClearVision-Theme-Editor"><a href="#ClearVision-Theme-Editor" class="headerlink" title="ClearVision Theme Editor"></a>ClearVision Theme Editor</h2><p>這裡來介紹此 Theme Editor 可修改的內容以及注意事項。</p>
<blockquote>
<p>以下有提到 Fixed attachment 要設為 False 的項目依定要注意，因為此主題的 User popout 和 User profile 的背景圖片是對整個 Discord 去做中心調整，而非對兩者的 container 做調整，因此這裡的 Fixed attachment 要把預設的 True 改為 False。 by - 採坑的作者 ( SubaRya )</p>
</blockquote>
<h3 id="最左邊直排的欄位"><a href="#最左邊直排的欄位" class="headerlink" title="最左邊直排的欄位"></a>最左邊直排的欄位</h3><ol>
<li>Colours: <ul>
<li>可選擇整體的版面顏色</li>
</ul>
</li>
<li>App background:<ul>
<li>整個 Discord 背景圖片</li>
</ul>
</li>
<li>User popout:<ul>
<li>側邊用戶點擊開的小介面</li>
<li><strong>Fixed attachment: False</strong></li>
</ul>
</li>
<li>User profile:<ul>
<li>側邊用戶點小介面點開後詳細的大介面</li>
<li><strong>Fixed attachment: False</strong></li>
</ul>
</li>
<li>Home button icon:<ul>
<li>左上角 Discord Icon 自定義</li>
</ul>
</li>
<li>Channel colours:<ul>
<li>頻道文字已讀、未讀、靜音的文字顏色</li>
</ul>
</li>
<li>Status colours:<ul>
<li>用戶狀態顏色自定義</li>
</ul>
</li>
<li>Custom fonts:<ul>
<li>主要字體 (推薦 <a href="https://fonts.google.com/specimen/Roboto?query=Roboto">Roboto</a>)</li>
<li>Code Block 的字體 (推薦 <a href="https://fonts.google.com/specimen/Fira+Code?query=Fira">Fira Code</a>)</li>
</ul>
</li>
<li>Others:<ul>
<li>寬度調整</li>
</ul>
</li>
<li>Addons:<ul>
<li>伺服器換到上方橫排</li>
<li>伺服器並排數</li>
<li>用戶狀態改成環繞頭像</li>
</ul>
</li>
</ol>
<h2 id="將-Theme-加入-Plugin"><a href="#將-Theme-加入-Plugin" class="headerlink" title="將 Theme 加入 Plugin"></a>將 Theme 加入 Plugin</h2><p>兩個步驟如下:</p>
<ol>
<li>從 Theme Editor 下載剛剛調好的 <code>.css</code> 檔</li>
<li>去 Discord 點擊 <code>使用者設定</code> -&gt; <code>Better Discord 的 佈景主題</code> -&gt; <code>開啟佈景主題資料夾</code> -&gt; <code>將剛剛載的 .css 檔案放入此資料夾</code> -&gt; <code>開關打開</code></li>
</ol>
<h2 id="其他有趣的-Plugin"><a href="#其他有趣的-Plugin" class="headerlink" title="其他有趣的 Plugin"></a>其他有趣的 Plugin</h2><ul>
<li><a href="https://betterdiscord.app/plugin/CallTimeCounter">CallTimeCounter</a>: 計算你連進語音經過多久時間</li>
<li><a href="https://betterdiscord.app/plugin/ShowHiddenChannels">ShowHiddenChannels</a>: 顯示伺服器被隱藏(不是你身分組的)的語音或文字頻道，但你還是無權限連線進去。</li>
<li><a href="https://betterdiscord.app/plugin/Typing%20Users%20Avatars">Typing Users Avatars</a>: 多個人在打字時可以看到正在打字那幾個人的頭像</li>
<li><a href="https://betterdiscord.app/plugin/Double%20Click%20To%20Edit">Double Click To Edit</a>: 對你已發送的訊息點兩下即可編輯</li>
<li><a href="https://betterdiscord.app/plugin/WhoReacted">WhoReacted</a>: 按此表情符號的用戶頭貼會顯示</li>
<li><a href="https://betterdiscord.app/plugin/OnlineFriendCount">OnlineFriendCount</a>: 左上角 Discord Icon 下顯示你有幾位朋友在線上</li>
</ul>
<h3 id="Plugin-放入相對應資料夾"><a href="#Plugin-放入相對應資料夾" class="headerlink" title="Plugin 放入相對應資料夾"></a>Plugin 放入相對應資料夾</h3><ol>
<li>去 Discord 點擊 <code>使用者設定</code> -&gt; <code>Better Discord 的 附加元件</code> -&gt; <code>開啟附加元件資料夾</code> -&gt; <code>將剛剛載的 .js 檔案放入此資料夾</code> </li>
<li>過程中需要更新舊更新、要 download 就 download </li>
<li>開關打開</li>
</ol>
]]></content>
      <categories>
        <category>Better Discord</category>
      </categories>
      <tags>
        <tag>Better Discord</tag>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>區間詢問類題目總集(更新中)</title>
    <url>/2022/02/22/%5BCSES%20FI%5D%20Range%20Queries/</url>
    <content><![CDATA[<h2 id="靜態區間總和-非帶修改"><a href="#靜態區間總和-非帶修改" class="headerlink" title="靜態區間總和 (非帶修改)"></a>靜態區間總和 (非帶修改)</h2><p>參考題目：<a href="https://cses.fi/problemset/task/1646">Static Range Sum Queries</a></p>
<p>題目類型：前綴和</p>
<h2 id="靜態區間最大值-最小值-非帶修改"><a href="#靜態區間最大值-最小值-非帶修改" class="headerlink" title="靜態區間最大值/最小值 (非帶修改)"></a>靜態區間最大值/最小值 (非帶修改)</h2><p>參考題目：<a href="https://cses.fi/problemset/task/1647">Static Range Minimum Queries</a></p>
<p>題目類型：線段樹、ST表</p>
<h3 id="單純遞迴並回傳值-TLE"><a href="#單純遞迴並回傳值-TLE" class="headerlink" title="單純遞迴並回傳值 (TLE)"></a>單純遞迴並回傳值 (TLE)</h3><p>該題目以<strong>單純遞迴並回傳值</strong>方向思考會 TLE，仔細觀察會發現有重複區間被詢問到。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// This code will get TLE absolutly</span>
<span class="token keyword">int</span> <span class="token function">SRMQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>r <span class="token operator">||</span> l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">SRMQ</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SRMQ</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Sparse-Table-稀疏表、ST-表"><a href="#Sparse-Table-稀疏表、ST-表" class="headerlink" title="Sparse Table (稀疏表、ST 表)"></a>Sparse Table (稀疏表、ST 表)</h3><p>參考資料：</p>
<ul>
<li><a href="https://cp.wiwiho.me/sparse-table/">WIWIHO 的競程筆記 Sparse Table</a></li>
<li><a href="https://oi-wiki.org/ds/sparse-table/">OI Wiki ST 表</a></li>
</ul>
<p>用於透過<strong>預處理</strong>快速查詢非帶修改資料結構最大/小值，一般像是 RMQ 問題。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>主要思路：倍增、DP<br>設 $f(i,j)$ 為區間 $[i,i+2^j-1]$  最大/小值<br>可先得知 $f(i,0)=$ 區間 $[i,i]$ 最大/小值 $=a_i$</p>
<h4 id="轉移方程"><a href="#轉移方程" class="headerlink" title="轉移方程"></a>轉移方程</h4><p>$2^j$ 長度的區間是由 2 個 $2^{j-1}$ 所組成，因此<br>$$f(i,j)=min/max(f(i,j-1),f(i+2^{j-1},j-1))$$</p>
<h4 id="求區間極值"><a href="#求區間極值" class="headerlink" title="求區間極值"></a>求區間極值</h4><p>用 2 個 $2^{\lfloor{log_2{(r-l+1)}}\rfloor}$ 長度的區間求極值即可，也就是 $[l,l+2^s-1]$ 和 $[r-2^s+1,r]$ 區間，而 $s=\lfloor{log_2{(r-l+1)}}\rfloor$</p>
<h4 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h4><p>區間重疊無妨，因為兩區間的聯集是欲求之區間即可，這也說明了<strong>同一個元素會被多個區間所包含</strong>，因此 <strong>Sparse Table 不支援帶修改</strong>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> max_lg<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>max_arrlen<span class="token operator">=</span><span class="token number">200000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> Log<span class="token punctuation">[</span>max_arrlen<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>F<span class="token punctuation">[</span>max_arrlen<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>max_lg<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build_logn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 建立 Log 表</span>
    Log<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> Log<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>max_arrlen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> Log<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Log<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// REP1(i,3,max_arrlen) Log[i]=Log[i/2]+1;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build_ST</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 預處理 ST 表</span>
    <span class="token function">REP1</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>max_lg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>F<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">build_logn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Input</span>
    <span class="token function">build_ST</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>log_j<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
        <span class="token keyword">int</span> log_j<span class="token operator">=</span>Log<span class="token punctuation">[</span>b<span class="token operator">-</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>log_j<span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>log_j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>log_j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment">// 兩區間聯集的極值</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="動態區間總和-極值（單點修改）"><a href="#動態區間總和-極值（單點修改）" class="headerlink" title="動態區間總和/極值（單點修改）"></a>動態區間總和/極值（單點修改）</h2><p>參考題目：</p>
<ul>
<li><a href="https://cses.fi/problemset/result/3580210/">Dynamic Range Sum Queries</a></li>
<li><a href="https://cses.fi/problemset/task/1649">Dynamic Range Minimum Queries</a></li>
</ul>
<p>題目類型：線段樹</p>
<h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">LL <span class="token function">up</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// 求區間總和</span>
    <span class="token comment">// return min(a,b); // 求區間最小值</span>
    <span class="token comment">// return max(a,b); // 求區間最大值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="建樹"><a href="#建樹" class="headerlink" title="建樹"></a>建樹</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">up</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 記得 pull</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="詢問"><a href="#詢問" class="headerlink" title="詢問"></a>詢問</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">LL <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>l <span class="token operator">&amp;&amp;</span> y<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Query</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 記得 pull</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="單點修改"><a href="#單點修改" class="headerlink" title="單點修改"></a>單點修改</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> LL val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">up</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 記得 pull</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Dynamic-Range-Sum-Queries-Solution"><a href="#Dynamic-Range-Sum-Queries-Solution" class="headerlink" title="[Dynamic Range Sum Queries] Solution"></a>[Dynamic Range Sum Queries] Solution</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Mid</span><span class="token expression"><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
LL arr<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Tree<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
LL <span class="token function">up</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">up</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
LL <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>l <span class="token operator">&amp;&amp;</span> y<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Query</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> LL val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">up</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>det<span class="token punctuation">,</span>k<span class="token punctuation">,</span>u<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>
    <span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> det<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>det<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> k <span class="token operator">>></span> u<span class="token punctuation">;</span>
            <span class="token function">Update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
            LL ans<span class="token operator">=</span><span class="token function">Query</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>競程紀錄</category>
      </categories>
      <tags>
        <tag>2022</tag>
        <tag>RMQ</tag>
        <tag>線段樹</tag>
        <tag>前綴和</tag>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>Coding Style 命名法</title>
    <url>/2022/04/08/%5BCoding%20Style%5D%20%E5%91%BD%E5%90%8D%E6%B3%95/</url>
    <content><![CDATA[<p>參考資料：<br><a href="https://cmmobile.gitbook.io/androidbook/xin-ren-xun-lian/code-style#ming-ming">CMAndroidBook - Coding Style</a><br><a href="https://ithelp.ithome.com.tw/articles/10263403">2021 iThome 鐵人賽 Day 11. Coding style</a><br><a href="https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB">Wiki 駝峰式大小寫</a></p>
<h2 id="駝峰式大小寫-Camel-Case"><a href="#駝峰式大小寫-Camel-Case" class="headerlink" title="駝峰式大小寫 (Camel-Case)"></a>駝峰式大小寫 (Camel-Case)</h2><ul>
<li>單字間不以空格、連接號、底線連結<ul>
<li>錯誤寫法 -&gt; my variable、my-variable、my_variable  </li>
</ul>
</li>
<li>命名形式分為兩種<ol>
<li>小駝峰式命名法（lower camel case）<ul>
<li>第一個單字以小寫字母開始，第二個單字的首字母大寫</li>
<li>Ex. myVariable</li>
</ul>
</li>
<li>大駝峰式命名法（upper camel case）<ul>
<li>每一個單字的首字母都採用大寫字母</li>
<li>Ex. MyVariable</li>
<li>也可以稱為<strong>Pascal命名法（Pascal Case）</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="整體結論"><a href="#整體結論" class="headerlink" title="整體結論"></a>整體結論</h2><ol>
<li>Code 裡除了<strong>註解</strong>和<strong>字串</strong>，其餘不得使用中文字</li>
<li>No <code>region</code>、<code>endregion</code></li>
<li>MagicNumber 請一律宣告成<strong>常數</strong>、<strong>變數</strong>或<strong>enum</strong></li>
<li>禁用無大括號單行 else -&gt; <a href="https://en.wikipedia.org/wiki/Dangling_else">Dangling Else</a></li>
<li>Compile 後有 Warning 的程式碼就是有問題，更不用說有 Error</li>
<li>常數命名一律用<strong>全大寫配底限分隔</strong> Ex. MAX_MAP_WIDTH</li>
<li>命名時請勿自行縮寫單字，除非該單字縮寫是通用的</li>
<li>Class、方法須遵守 大駝峰式命名 規則</li>
<li>參數、區域變數須遵守 小駝峰式命名 規則</li>
<li>方法的第一個單字必須為動詞(Get、Push、Delete、Update…等等)</li>
<li>單字不能超過3個(太長的專有名詞須先建立縮寫表，統一所有人使用的縮寫)</li>
</ol>
<h2 id="檔案"><a href="#檔案" class="headerlink" title="檔案"></a>檔案</h2><ol>
<li>大駝峰命名 Ex. StringParser.cpp</li>
<li>檔案名與類別需同名<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// StringParser.cpp</span>
<span class="token comment">// 正確</span>
<span class="token keyword">class</span> <span class="token class-name">StringParser</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 錯誤</span>
<span class="token keyword">class</span> <span class="token class-name">OtherClass</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>理論上一個檔案<strong>只有</strong>一個主要類別<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// StringParser.cpp</span>
<span class="token keyword">class</span> <span class="token class-name">StringParser</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">DoAnything</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="類別的命名"><a href="#類別的命名" class="headerlink" title="類別的命名"></a>類別的命名</h2><ol>
<li>大駝峰命名</li>
<li>使用<strong>名詞</strong>或<strong>形容詞 + 名詞</strong>的方式命名<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 正確</span>
<span class="token keyword">class</span> <span class="token class-name">NestedStructure</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//錯誤</span>
<span class="token keyword">class</span> <span class="token class-name">GetPosition</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="方法的命名"><a href="#方法的命名" class="headerlink" title="方法的命名"></a>方法的命名</h2><ol>
<li>小駝峰命名</li>
<li>使用<strong>動詞</strong>或<strong>動詞 + 名詞</strong>的方式命名<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>  getPosition<span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><strong>方法的參數</strong>或<strong>區域變數</strong>名使用<strong>小駝峰命名</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getPosition</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string objectName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>以 Boolean 作為回傳值的命名，需使用 isXXX, canXXX, hasXXX, 或 XXXable 命名。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="Package-name-的命名"><a href="#Package-name-的命名" class="headerlink" title="Package name 的命名"></a>Package name 的命名</h2><ul>
<li>全小寫</li>
</ul>
<h2 id="Resource-的命名"><a href="#Resource-的命名" class="headerlink" title="Resource 的命名"></a>Resource 的命名</h2><ul>
<li>全小寫</li>
<li>以畫面使用的位置＋功能 來命名<ul>
<li>activity_xxx.xml</li>
<li>layout_xxx.xml</li>
<li>selector_xxx.xml</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="View-id-的命名"><a href="#View-id-的命名" class="headerlink" title="View id 的命名"></a>View id 的命名</h2><ul>
<li>功能＋使用元件 來命名<ul>
<li>login_textView</li>
<li>reply_us_editText</li>
<li>xxx_textView</li>
<li>xxx_editText</li>
<li>xxx_button</li>
<li>xxx_linearLayout(constraintLayout,..)</li>
<li>…</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Coding Style</category>
      </categories>
      <tags>
        <tag>2022</tag>
        <tag>Coding Style</tag>
      </tags>
  </entry>
  <entry>
    <title>Facebook Hacker Cup 2021 Qualification Round</title>
    <url>/2021/08/30/%5BFacebook%20Hacker%20Cup%202021%5D%20Qualification%20Round/</url>
    <content><![CDATA[<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>目前只是資格賽，僅需解開一題即可晉階至 Round 1<br>比賽時間總共 72 小時，共 5 題<br>我是在比賽結束前 5 小時才想到要開始來解題，就當作是休閒打，最後寫了兩題水題並提交，分別是 A1 和 B<br>比賽連結：<a href="https://www.facebook.com/codingcompetitions/hacker-cup/2021/qualification-round">這裡</a></p>
<h2 id="Problem-A1-Consistency-Chapter-1"><a href="#Problem-A1-Consistency-Chapter-1" class="headerlink" title="Problem A1: Consistency - Chapter 1"></a>Problem A1: Consistency - Chapter 1</h2><h3 id="題序"><a href="#題序" class="headerlink" title="題序"></a>題序</h3><p>這題給定一個 S 字串，$1 \leq |S| \leq 100$ ，接下來會做這件事：</p>
<blockquote>
<p>If her chosen letter is a vowel, then she may replace it with any consonant of her choice. On the other hand, if her chosen letter is a consonant, then she may replace it with any vowel of her choice.</p>
</blockquote>
<p>目的如下：</p>
<blockquote>
<p>Connie really only likes nice, consistent strings. She considers a string to be consistent if and only if all of its letters are the same.</p>
</blockquote>
<p>每做一次 replace 花費 1 個單位時間</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先算每個字母出現的數量，再將母音和非母音分成兩個部份，兩區內找出最大值並算最大值字母以外的變換次數。<br><strong>變換次數為自己區除了最大值，總數的 2 倍，以及另一區的總和</strong><br>最後 2 區取 min</p>
<h3 id="原始碼"><a href="#原始碼" class="headerlink" title="原始碼"></a>原始碼</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">C1</span><span class="token punctuation">(</span><span class="token keyword">char</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n_v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token char">'A'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'E'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'I'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'O'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'U'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>id<span class="token punctuation">)</span> v<span class="token operator">+=</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> n_v<span class="token operator">+=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> n_v<span class="token operator">+</span>v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">C2</span><span class="token punctuation">(</span><span class="token keyword">char</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n_v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span><span class="token char">'E'</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span><span class="token char">'I'</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span><span class="token char">'O'</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span><span class="token char">'U'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>id<span class="token punctuation">)</span> n_v<span class="token operator">+=</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> v<span class="token operator">+=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> n_v<span class="token operator">+</span>v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">Solve</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> tmp_vm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tmp_nvm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> num<span class="token operator">=</span><span class="token char">'*'</span><span class="token punctuation">,</span>n_v<span class="token operator">=</span><span class="token char">'*'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token char">'A'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'E'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'I'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'O'</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token char">'U'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>tmp_vm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                num<span class="token operator">=</span>i<span class="token punctuation">;</span>
                tmp_vm<span class="token operator">=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>tmp_nvm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                n_v<span class="token operator">=</span>i<span class="token punctuation">;</span>
                tmp_nvm<span class="token operator">=</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">C1</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">C2</span><span class="token punctuation">(</span>n_v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token char">'A'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> T<span class="token punctuation">,</span>fl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        string str<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> str<span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span> mp<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: %d\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>fl<span class="token punctuation">,</span><span class="token function">Solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Problem-B-Xs-and-Os"><a href="#Problem-B-Xs-and-Os" class="headerlink" title="Problem B: Xs and Os"></a>Problem B: Xs and Os</h2><h3 id="題序-1"><a href="#題序-1" class="headerlink" title="題序"></a>題序</h3><p>這題給定一個整數 N，$1 \leq N \leq 50$ ，接下來會輸入由 ‘.’、’O’、’X’ 組成的 $N \times N$ 陣列，只有橫排與直排都為 ‘X’ 時才算贏，’.’ 表示為還沒填入。<br>現在你是 ‘X’ 並且是先手，你可以同時在橫排或直排填入多個 ‘X’，並且想填入最少的 ‘X’ 就獲勝，輸出填入最少 ‘X’ 的數量以及有幾種方法，沒有贏得方法則輸出 Impossible 。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>把每一行與列的數量都記錄下來，找到最小值後在數數量。<br><strong>記得特判最小值為 1 的情況</strong><br>OXO<br>X . X<br>OXO<br>這種情況只能算 1 種方法。</p>
<h3 id="原始碼-1"><a href="#原始碼-1" class="headerlink" title="原始碼"></a>原始碼</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">char</span> mp<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> mp_num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>N<span class="token punctuation">,</span>fl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> mp_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Solve</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> lo_min<span class="token operator">=</span>INF<span class="token punctuation">,</span>meth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span> det<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>det<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> tmp<span class="token operator">=</span>INF<span class="token punctuation">;</span>
        mp_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>
        lo_min<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>lo_min<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'O'</span><span class="token punctuation">)</span> det<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>det<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> tmp<span class="token operator">=</span>INF<span class="token punctuation">;</span>
        mp_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>
        lo_min<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>lo_min<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lo_min<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>mp_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> mp_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span> mp_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>lo_min<span class="token punctuation">)</span> meth<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lo_min<span class="token operator">==</span>INF<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: Impossible\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>fl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: %d %d\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>fl<span class="token punctuation">,</span>lo_min<span class="token punctuation">,</span>meth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cin <span class="token operator">>></span> N<span class="token punctuation">;</span>
        <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token function">REP</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>N<span class="token punctuation">)</span> cin <span class="token operator">>></span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">Solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>演算法</tag>
        <tag>競程</tag>
        <tag>Implementation</tag>
      </tags>
  </entry>
  <entry>
    <title>ICPC模擬賽 2015 ICPC Singapore Clone</title>
    <url>/2020/11/06/%5BICPC%E6%A8%A1%E6%93%AC%E8%B3%BD%5D%202015%20ICPC%20Singapore%20Clone/</url>
    <content><![CDATA[<h1 id="校內-ICPC-模擬賽-心得"><a href="#校內-ICPC-模擬賽-心得" class="headerlink" title="校內 ICPC 模擬賽 心得"></a>校內 ICPC 模擬賽 心得</h1><h2 id="模擬賽題目：2015-ICPC-Singapore"><a href="#模擬賽題目：2015-ICPC-Singapore" class="headerlink" title="模擬賽題目：2015 ICPC Singapore"></a>模擬賽題目：2015 ICPC Singapore</h2><p>連結：<a href="https://open.kattis.com/contests/niih2v">https://open.kattis.com/contests/niih2v</a></p>
<p><strong>之前的我們：我們打競程打健康的。</strong><br><strong>現在的我們：為了出國一起捨棄GPA OwO</strong></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>天使宗哲設錯日期，設到明天晚上，調整後延後10分鐘考www<br>比賽時間：2020/11/05 18:10~23:10</p>
<p>開頭小差曲：我們到了一間不是電腦教室的地方上機，原齊想用vim，文元想用sublime，但我的筆電只有vim，所以比賽開始後文元現場直接裝，sad。</p>
<p>一開場我先看pC，第一次知道ICPC的題敘超可怕的長，裡面的劇情用詞超強的 &lt;- (這不是重點XD)</p>
<p>pC: n表示接下來有n個食譜，每個食譜有m個數字表示combine在一起，<strong>必定</strong>由上往下的食譜進行合併，合併過後的數字不能單獨跟他沒有合併過的合併，然後合併的條件是</p>
<ol>
<li>合併過不得單獨跟沒合併過的合併</li>
<li>合併過的可以<strong>一起</strong>跟沒有合併過的合併</li>
<li>呈2，或是可以一起跟合併過的一起合併</li>
</ol>
<p>看完後跟文元(SAD)、原齊說我的想法，我們同時表示：「裸的DSU啊！」，然後交給DSU刻超快的SAD刻。</p>
<p>中間小插曲：文元突然轉不過來第3點怎麼刻，我就說：沒做過的砍掉，每一個dsu的size總和一定會等於剩下的。C就這樣被首殺掉了。</p>
<p>然後我看pE，看到一半後被抓去想pI，就三種字母，給分別三種的數量，將其排列但相同字母的不能相鄰，我想了一下，資芽算法班貌似在DP那章有紅藍綠著色問題，但我又忘了怎麼轉移，現場推我腦袋燒雞，交給原齊後他也宣告放棄，於是就跟他們說pE想法。</p>
<p>我只說了一半(誰叫我只看一半ㄎㄎ)，順便他們跟我解釋pF，後來發現pE完全就是模擬題(模擬比賽算penalty)(而且一堆人AC了)，他們趕緊刻完AC後交給我寫pF。</p>
<p>pF: 每隻細菌都有自己適合的[U,L]，表示溫度範圍，然候有n隻細菌，每個保溫箱有固定的溫度，求最少需要多少保溫箱。</p>
<p>其實pF沒有很難，但一開始原齊想法錯了導致送上去兩次WA，後來他製造了奇怪的測資把自己的想法ban掉OwO，我就重刻。由於我沒有好好維護while導致某些比較大的測資會infinite loop，我又WA了兩次，而且我的code超級不clean，於是原齊打算重刻，果然刻完送上去AC了。</p>
<p>這讓我想起打R6時天兆常跟我說：「不會玩女鬼就不要玩; 不會玩大盾就不要玩！」我現在想：「不會刻while就……好好維護啊！然後code乾淨一點！」(我真是欠譴責OwO)</p>
<p>後來我們pG想不出最優解，原本想說是greedy，但文元說dp才對，可是沒想法。<br>pG題序如下：<br>有一個stack，裡面有一排數字，逐一取出分堆。<br>分堆定義：</p>
<ol>
<li>取出後可以加起前一個並組成一堆</li>
<li>依序以左至右的每堆數量必須為非嚴格遞增</li>
<li>呈1.取出後可以選擇併入前一堆，或是自立一堆<br>題目所求：最多分幾堆</li>
</ol>
<p>最後我們21:45就先離場了，總共打了3hr35m。</p>
<p>總之，ICPC加油啦！我會好好練 clean code的 QAQ</p>
<p><img src="https://i.imgur.com/lMG2pH2.jpg" loading="lazy"></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>模擬賽</tag>
      </tags>
  </entry>
  <entry>
    <title>競程用模板</title>
    <url>/2021/04/11/%5BLifeCP_template%5D%20%E7%AB%B6%E7%A8%8B%E7%94%A8%E6%A8%A1%E6%9D%BF(%E6%8C%81%E7%BA%8C%E6%9B%B4%E6%96%B0%E4%B8%AD)/</url>
    <content><![CDATA[<h1 id="競程用模板-持續更新中"><a href="#競程用模板-持續更新中" class="headerlink" title="競程用模板 (持續更新中)"></a>競程用模板 (持續更新中)</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">region define<span class="token operator">/</span><span class="token keyword">typedef</span>   </span><span class="token comment">// for vs code only</span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion   </span><span class="token comment">//for vs code only   </span></span>

<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//jizz;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Template</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>競程</tag>
        <tag>算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>For自己競程的解題紀錄</title>
    <url>/2020/12/01/%5BLifeCP_%E7%94%9F%E6%B4%BB%E7%AB%B6%E7%A8%8B%5D%20For%E8%87%AA%E5%B7%B1%E7%AB%B6%E7%A8%8B%E7%9A%84%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/</url>
    <content><![CDATA[<h1 id="紀錄大學競程隊伍我所負責解題的領域（字串-序列-一些雜題）"><a href="#紀錄大學競程隊伍我所負責解題的領域（字串-序列-一些雜題）" class="headerlink" title="紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）"></a>紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）</h1><p>隊伍網站: <a href="https://ntnu-import-magic.github.io/">Link</a></p>
<h2 id="Failure-Function"><a href="#Failure-Function" class="headerlink" title="Failure Function"></a>Failure Function</h2><p>參考資料：</p>
<ul>
<li><a href="https://www.csie.ntu.edu.tw/~sprout/algo2018/">資訊之芽算法班第13週KMP</a></li>
<li><a href="https://web.ntnu.edu.tw/~algo/Substring.html#2">演算法筆記 String Searching</a><br>模板題：<a href="https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1239">Uva-10298</a><br>這題先做完Failure Function後直接判斷其size-Failure Function最後一個的值的結果是否整除原本的size。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> 
<span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
	<span class="token keyword">int</span> j<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> F<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">=</span>F<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
		F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	string str<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> str <span class="token operator">&amp;&amp;</span> str<span class="token operator">!=</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">fail</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> det<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> ans<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>det<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1\n"</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2>模板題：<a href="https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=2470">Uva-11475</a><br>參考資料：</li>
<li><a href="https://www.csie.ntu.edu.tw/~sprout/algo2018/">資訊之芽算法班第13週KMP</a></li>
</ul>
<p>題序：利用KMP去產生既定字串的最小的回文字串。</p>
<p>想法：首先把字串倒過來，將它的Failure Function列出來後，利用KMP的方式去尋找失敗值在哪裡，這樣就可以從失敗值的位置倒著輸出即為所求。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token comment">//#define int long long</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> F<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">failure</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    F<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sz<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">=</span>F<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
        F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> rev<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">failure</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rev<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">=</span>F<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>rev<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> j<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    string str<span class="token punctuation">,</span>str1<span class="token punctuation">,</span>rev<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> str1 <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> l<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        str<span class="token operator">=</span>str1<span class="token punctuation">;</span>
        <span class="token function">reverse</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rev<span class="token operator">=</span>str1<span class="token punctuation">;</span>
        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">KMP</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>rev<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token comment">//也可以這樣寫for(++j;j&lt;l;j++) cout &lt;&lt; rev[j];</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="strstr應用"><a href="#strstr應用" class="headerlink" title="strstr應用"></a>strstr應用</h2><p>題目：<a href="https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1620">Uva-10679</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cmp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
	cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cin <span class="token operator">>></span> str<span class="token punctuation">;</span>
		cin <span class="token operator">>></span> m<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			cin <span class="token operator">>></span> cmp<span class="token punctuation">;</span>
			<span class="token keyword">char</span> <span class="token operator">*</span>deter<span class="token operator">=</span><span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>deter<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"n\n"</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"y\n"</span><span class="token punctuation">;</span>  
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>競程紀錄</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>競程</tag>
        <tag>算法</tag>
        <tag>Failure Function</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM String 中 STL 的基本應用</title>
    <url>/2021/08/17/%5BLifeCP_%E7%94%9F%E6%B4%BB%E7%AB%B6%E7%A8%8B%5D%20%E3%80%91String%20STL%20%E7%AF%87/</url>
    <content><![CDATA[<p>參考文章：<a href="https://blog.csdn.net/weixin_43093481/article/details/82318377">這篇</a></p>
<h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><h3 id="行尾空白"><a href="#行尾空白" class="headerlink" title="行尾空白"></a>行尾空白</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" \n"</span><span class="token punctuation">[</span>i<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>C++ 陣列語法 <code>a[b]</code> 等價於 <code>*(a+b)</code> 也就是 <code>&quot; \n&quot;[i==n-1]</code> 可以看成是 <code>str=&quot; \n&quot;</code> <code>*(str+(i==n-1))</code>。</p>
<h3 id="C-整行讀取"><a href="#C-整行讀取" class="headerlink" title="C++ 整行讀取"></a>C++ 整行讀取</h3><ul>
<li>cin.getline(name, length, ending character)<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>getline(istream, string)<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h2><h3 id="工能"><a href="#工能" class="headerlink" title="工能"></a>工能</h3><ul>
<li>時常用來做字串分割 ( 空白分割 )<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stringstream ss<span class="token punctuation">;</span>
string s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>
<span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
ss <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>ss <span class="token operator">>></span> s2<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>int string 之間的轉換</li>
</ul>
<h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stringstream ss1<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// 缺一不可</span>
ss1<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ss1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="string-STL"><a href="#string-STL" class="headerlink" title="string STL"></a>string STL</h2><h3 id="反轉"><a href="#反轉" class="headerlink" title="反轉"></a>反轉</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">reverse</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="反轉並賦值"><a href="#反轉並賦值" class="headerlink" title="反轉並賦值"></a>反轉並賦值</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">s2<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="大小寫轉換"><a href="#大小寫轉換" class="headerlink" title="大小寫轉換"></a>大小寫轉換</h3><ul>
<li><code>tranform(,,, :: toupper)</code> / <code>tranform(,,, :: tolower)</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-colon punctuation">::</span> toupper<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 全部轉大寫</span>
<span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-colon punctuation">::</span> tolower<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 全部轉小寫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><code>toupper</code> / <code>tolower</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">toupper</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//逐一轉大寫</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">tolower</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//逐一轉小寫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="back-insert"><a href="#back-insert" class="headerlink" title="back_insert"></a>back_insert</h3><ul>
<li><code>back_inserter()</code></li>
<li>好處：不需先知道容器的大小</li>
</ul>
<p>搭配 <code>transform()</code> 的用法</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
s1<span class="token operator">=</span><span class="token string">"abcdefghijklmn"</span><span class="token punctuation">;</span>
s2<span class="token operator">=</span><span class="token string">"123456789"</span><span class="token punctuation">;</span>
<span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-colon punctuation">::</span> toupper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s2="123456789ABCDEFGHIJKLMN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>搭配 <code>copy()</code> 的用法</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
s1<span class="token operator">=</span><span class="token string">"abcdefghijklmn"</span><span class="token punctuation">;</span>
s2<span class="token operator">=</span><span class="token string">"123456789"</span><span class="token punctuation">;</span>
<span class="token function">copy</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">back_inserter</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s2="123456789abcdefghijklmn";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="string-to-int"><a href="#string-to-int" class="headerlink" title="string to int"></a>string to int</h3><ul>
<li><code>atoi()</code></li>
</ul>
<p>使用 <code>c_str</code> 的原因：<a href="https://stackoverflow.com/questions/7416445/what-is-use-of-c-str-function-in-c/7416581">參考文章</a></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">s1<span class="token operator">=</span><span class="token string">"123456789"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a=123456790;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="int-to-string"><a href="#int-to-string" class="headerlink" title="int to string"></a>int to string</h3><ul>
<li><code>to_string()</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">123456789</span><span class="token punctuation">;</span>
string s1<span class="token punctuation">;</span>
s1<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s1="123456790"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><ul>
<li><code>.assign()</code></li>
<li><code>string::npos</code> 的定義為 <code>static const size_t npos = -1;</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">,</span>str<span class="token punctuation">;</span>
str<span class="token operator">=</span><span class="token string">"SubaRya"</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s="SubaRya"</span>
s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s="uba"</span>
s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s="Rya"</span>
s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s="hello" </span>
s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"SubaRya"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 'S','u','b','a','R','y','a','\0' 給 s</span>
s<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s="aaaaa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="刪除連續重複字元"><a href="#刪除連續重複字元" class="headerlink" title="刪除連續重複字元"></a>刪除連續重複字元</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1<span class="token operator">=</span>s2<span class="token operator">=</span><span class="token string">"aaabbbbnnnaaaafff"</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s2<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token function">ALL</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s1="abnaf", s2="abfn"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="刪除特定字元"><a href="#刪除特定字元" class="headerlink" title="刪除特定字元"></a>刪除特定字元</h3><ul>
<li><code>erase()</code>、<code>remove()</code><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">s1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">remove</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token comment">/*欲刪除的字元*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="字串中尋找"><a href="#字串中尋找" class="headerlink" title="字串中尋找"></a>字串中尋找</h3><ul>
<li><code>.find()</code></li>
<li>如果下述 <code>s2</code> 改成 單一字元也可以<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">// 從 pos 開始查找 s2 在 s1 中出現的位置回傳給 p</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not found.\n"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>競程紀錄</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>競程</tag>
        <tag>Standard Template Library</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>NTHU 10322 PC 費式數列與矩陣快速冪</title>
    <url>/2019/02/21/%5BNTHU%5D10322%20PC%20%E8%B2%BB%E5%BC%8F%E6%95%B8%E5%88%97%E8%88%87%E7%9F%A9%E9%99%A3%E5%BF%AB%E9%80%9F%E5%86%AA/</url>
    <content><![CDATA[<p>題目連結:<a href="https://acm.cs.nthu.edu.tw/problem/10322/">https://acm.cs.nthu.edu.tw/problem/10322/</a></p>
<p>一題矩陣快速冪裸題(題目就表明(?)</p>
<p>當然是好好地把矩陣的乘法定義定好，注意一些0/1擺放的細節，把其套上快速冪的模板，就大功告成了。&gt;&lt;</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">po</span> <span class="token expression">pop_back<span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">F</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression">second</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CN</span> <span class="token expression">cout<span class="token operator">&lt;&lt;</span></span><span class="token string">"\n"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">m</span> <span class="token expression"><span class="token number">100000007</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> array<span class="token operator">&lt;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">></span> Matrix<span class="token punctuation">;</span>
Matrix <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>Matrix A <span class="token punctuation">,</span> Matrix B<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Matrix C<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
                C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>m<span class="token operator">+</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%</span>m<span class="token operator">*</span>B<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>m<span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> C<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Matrix <span class="token function">power</span><span class="token punctuation">(</span>Matrix A<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Matrix ans<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
            ans<span class="token operator">=</span>ans<span class="token operator">*</span>A<span class="token punctuation">;</span>
        n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
        A<span class="token operator">=</span>A<span class="token operator">*</span>A<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> num <span class="token operator">||</span> num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            Matrix A<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            Matrix C<span class="token operator">=</span><span class="token function">power</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>2019</tag>
        <tag>NTHU</tag>
        <tag>矩陣快速冪</tag>
        <tag>數論</tag>
      </tags>
  </entry>
  <entry>
    <title>NTNU 演算法課程第一週作業 Writeup</title>
    <url>/2022/03/11/%5BNTNU_Algo%5D%20%E7%AC%AC%E4%B8%80%E9%80%B1%E4%BD%9C%E6%A5%AD%20Writeup/</url>
    <content><![CDATA[<h2 id="pA-293-Triangle"><a href="#pA-293-Triangle" class="headerlink" title="pA [293] Triangle"></a>pA [293] Triangle</h2><p>題目概述：<br>最初狀態有一個正三角形，每一個時間單位會使每一個三角形分割成 4 個正三角形(一個朝下、三個朝上)。<br>詢問時間點 n ，求有幾個<strong>朝上</strong>的三角形。</p>
<p>作法：</p>
<ol>
<li>找到三角形朝上的規律</li>
<li>快速冪</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">region define<span class="token operator">/</span><span class="token keyword">typedef</span></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">getchar</span> <span class="token expression">getchar_unlocked</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">__Type_of_scan</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>__Type_of_scan <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	__Type_of_scan _tmp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> s<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">&lt;</span><span class="token char">'0'</span><span class="token operator">||</span>s<span class="token operator">></span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span> _tmp<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        s<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">>=</span><span class="token char">'0'</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
        s<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	x<span class="token operator">*=</span>_tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">__Type_of_print</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>__Type_of_print x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">=</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion</span></span>

<span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
LL <span class="token function">power</span><span class="token punctuation">(</span>LL A<span class="token punctuation">,</span>LL n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    LL ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    A<span class="token operator">=</span>A<span class="token operator">%</span>mod<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">*</span>A<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>
        A<span class="token operator">=</span><span class="token punctuation">(</span>A<span class="token operator">*</span>A<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    LL d<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>
    <span class="token function">scan</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp<span class="token operator">=</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="pB"><a href="#pB" class="headerlink" title="pB []"></a>pB []</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">region define<span class="token operator">/</span><span class="token keyword">typedef</span></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion</span></span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>chk<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    PII arr1<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr2<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
        arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr1<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PII tmp<span class="token operator">=</span>arr1<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp1<span class="token operator">=</span>arr1<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">.</span>first<span class="token operator">></span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&amp;&amp;</span> det<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            tmp<span class="token operator">=</span>tmp1<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>first<span class="token operator">==</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            tot<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>first<span class="token operator">></span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span>second<span class="token operator">&lt;=</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            det<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            tmp1<span class="token operator">=</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tot<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="pC"><a href="#pC" class="headerlink" title="pC []"></a>pC []</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">region define<span class="token operator">/</span><span class="token keyword">typedef</span></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Mid</span><span class="token expression"><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PLI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion</span></span>
<span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
LL arr<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Leaf</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Leaf Tree<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">&lt;</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>  
        <span class="token keyword">return</span><span class="token punctuation">;</span>      
    <span class="token punctuation">&#125;</span>
    Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>Tree<span class="token punctuation">[</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>l<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">up</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Leaf <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>l <span class="token operator">&amp;&amp;</span> y<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Leaf tmp1<span class="token punctuation">,</span>tmp2<span class="token punctuation">;</span>
    tmp1<span class="token operator">=</span><span class="token function">Query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp2<span class="token operator">=</span><span class="token function">Query</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tmp1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>tmp2<span class="token punctuation">.</span>val<span class="token operator">?</span>tmp1<span class="token operator">:</span>tmp2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> LL val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span>
        Tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>l<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token function">Mid</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">up</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    LL tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">REP1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        Leaf tmp<span class="token punctuation">;</span>
        tmp<span class="token operator">=</span><span class="token function">Query</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// cout &lt;&lt; "tmp= " &lt;&lt; tmp.val &lt;&lt; " " &lt;&lt; tmp.pos &lt;&lt; "\n";</span>
        <span class="token comment">// cout &lt;&lt; "arr[i]= " &lt;&lt; arr[i] &lt;&lt; " " &lt;&lt; i &lt;&lt; "\n\n";</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>pos<span class="token operator">!=</span>i <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"tmp= "</span> <span class="token operator">&lt;&lt;</span> tmp<span class="token punctuation">.</span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> tmp<span class="token punctuation">.</span>pos <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"arr[i]= "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span>
            tot<span class="token operator">=</span><span class="token punctuation">(</span>tot<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val<span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">abs</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>pos<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>
            <span class="token function">Update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>pos<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>tmp<span class="token punctuation">.</span>pos<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="pD"><a href="#pD" class="headerlink" title="pD []"></a>pD []</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">region define<span class="token operator">/</span><span class="token keyword">typedef</span></span></span>
<span class="token comment">/*-----define-----*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALL</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REP1</span><span class="token expression"><span class="token punctuation">(</span>I<span class="token punctuation">,</span>N<span class="token punctuation">,</span>M<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> I<span class="token operator">=</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">&lt;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>I<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SORT_UNIQUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_POS</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MS0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">maxE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">minE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NINF</span> <span class="token expression"><span class="token number">0xc0c0c0c0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span></span></span>
<span class="token comment">/*-----typedef-----*/</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> VI<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> VPII<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>LL<span class="token operator">></span> status<span class="token punctuation">,</span>lisan<span class="token punctuation">;</span>
<span class="token keyword">inline</span> vector<span class="token operator">&lt;</span>LL<span class="token operator">></span> <span class="token function">discretization</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>LL<span class="token operator">></span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    status<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lisan <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>lisan<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lisan<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lisan<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>lisan<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lisan<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>lisan<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
        status<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>lisan<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lisan<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>lisan<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
LL Bit<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>x<span class="token operator">+=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> Bit<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">inline</span> LL <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    LL sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> Bit<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">endregion</span></span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    jizz<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    LL tot_elem<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>det<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tmp<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>LL<span class="token operator">></span> arr<span class="token punctuation">,</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cin <span class="token operator">>></span> tmp<span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    arr<span class="token operator">=</span><span class="token function">discretization</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> v1<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> v2<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    LL ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">MS0</span><span class="token punctuation">(</span>Bit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>v1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ans<span class="token operator">+=</span>tot_elem<span class="token operator">-</span><span class="token function">query</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tot_elem<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">MS0</span><span class="token punctuation">(</span>Bit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tot_elem<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        ans<span class="token operator">+=</span>tot_elem<span class="token operator">-</span><span class="token function">query</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tot_elem<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">REP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> pos<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>v1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>v2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            det<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>det<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes\n"</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>2022</tag>
        <tag>RMQ</tag>
        <tag>算法</tag>
        <tag>NTNU</tag>
        <tag>BIT</tag>
        <tag>Greedy</tag>
        <tag>快速冪</tag>
      </tags>
  </entry>
  <entry>
    <title>SOJ 41 大顆壽司</title>
    <url>/2018/08/16/%5BSOJ%5D%2041%20%E5%A4%A7%E9%A1%86%E5%A3%BD%E5%8F%B8/</url>
    <content><![CDATA[<p>題目URL:<a href="https://pc2.tfcis.org/dev/index.php/problem/view/41/">https://pc2.tfcis.org/dev/index.php/problem/view/41/</a><br>來到了清大的營隊，回顧一下最短路徑的裸題~<br>debug到死才發現我是垃圾~(因為我忘了把adj clear掉)</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">weight</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">index</span> <span class="token expression">second</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOS</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TI</span> <span class="token expression">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> edge<span class="token operator">=</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> vnum<span class="token punctuation">,</span>dist<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num<span class="token punctuation">,</span>M<span class="token punctuation">,</span>st<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>edge<span class="token operator">></span> adj<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span>vnum<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span>dist<span class="token operator">+</span>vnum<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    priority_queue<span class="token operator">&lt;</span>edge<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>edge<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>edge<span class="token operator">>></span> pq<span class="token punctuation">;</span>
    pq<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u<span class="token operator">=</span>pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v<span class="token operator">:</span>adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>v<span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                dist<span class="token punctuation">[</span>v<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
                pq<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>v<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//for(int i=1;i&lt;=vnum;i++)</span>
    <span class="token comment">// cout &lt;&lt; "dist[" &lt;&lt; i  &lt;&lt; "]" &lt;&lt; dist[i] &lt;&lt;endl;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    IOS<span class="token punctuation">;</span>TI<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> vnum <span class="token operator">>></span> M <span class="token operator">>></span> st <span class="token operator">>></span> t<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> w<span class="token punctuation">;</span>
            adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a to b</span>
            adj<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b to a</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">dijkstra</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>vnum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>2018</tag>
        <tag>最短路徑</tag>
        <tag>SOJ</tag>
        <tag>djijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>SOJ 43 Lacy 路網</title>
    <url>/2018/08/16/%5BSOJ%5D%2043%20Lacy%20%E8%B7%AF%E7%B6%B2/</url>
    <content><![CDATA[<p>題目URL:<a href="https://pc2.tfcis.org/dev/index.php/problem/view/43/">https://pc2.tfcis.org/dev/index.php/problem/view/43/</a></p>
<p>MST的裸題，簡單來說只要把operator的比較換一下，就變最大生成樹了，然後順便善用dsu並且小複習。(清大營隊進修ing)</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">osptimize</span><span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOS</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TI</span> <span class="token expression">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> MI<span class="token operator">=</span><span class="token number">100005</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>weight<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>edge <span class="token operator">&amp;</span>a<span class="token punctuation">,</span>edge <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>weight <span class="token operator">></span> b<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
vector<span class="token operator">&lt;</span>edge<span class="token operator">></span> v<span class="token punctuation">;</span>
<span class="token keyword">int</span> vnum<span class="token punctuation">,</span>vedge<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">disjointset</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> f<span class="token punctuation">[</span>MI<span class="token punctuation">]</span><span class="token punctuation">,</span>rank<span class="token punctuation">[</span>MI<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> val<span class="token punctuation">;</span>
        <span class="token keyword">return</span> f<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">bool</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rank<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>rank<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
            rank<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">disjointset</span> dsu<span class="token punctuation">;</span>
    dsu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>vnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cou<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vedge <span class="token operator">&amp;&amp;</span> cou<span class="token operator">&lt;</span>vnum <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>y<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>
        <span class="token comment">//cout &lt;&lt; "x=" &lt;&lt;x &lt;&lt; "y=" &lt;&lt; y &lt;&lt;endl;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dsu<span class="token punctuation">.</span><span class="token function">same</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>  
            total<span class="token operator">+=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
            cou<span class="token operator">++</span><span class="token punctuation">;</span>
            dsu<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//cout &lt;&lt;"total="&lt;&lt;total &lt;&lt;endl;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    IOS<span class="token punctuation">;</span>TI<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> vnum <span class="token operator">>></span> vedge<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">edge</span> cpy<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vedge<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> w<span class="token punctuation">;</span>
            cpy<span class="token punctuation">.</span>from<span class="token operator">=</span>a<span class="token punctuation">;</span>
            cpy<span class="token punctuation">.</span>to<span class="token operator">=</span>b<span class="token punctuation">;</span>
            cpy<span class="token punctuation">.</span>weight<span class="token operator">=</span>w<span class="token punctuation">;</span>
            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>並查集</tag>
        <tag>2018</tag>
        <tag>SOJ</tag>
        <tag>MST</tag>
      </tags>
  </entry>
  <entry>
    <title>Sprout OJ RMQ練習</title>
    <url>/2018/12/26/%5BSprout%20OJ%5D%20No.80%20RMQ%E7%B7%B4%E7%BF%92/</url>
    <content><![CDATA[<p>題目來源:<a href="https://neoj.sprout.tw/problem/80/">https://neoj.sprout.tw/problem/80/</a><br>參考: <a href="https://slides.com/sylveon/2017wds#/2">https://slides.com/sylveon/2017wds#/2</a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span> <span class="token punctuation">(</span></span><span class="token string">"O2"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token comment">//#define int long long</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">jizz</span> <span class="token expression">ios_base<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">,</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">id1</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">id2</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">F</span> <span class="token expression">first</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token expression">second</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">max_n</span> <span class="token expression"><span class="token number">1000000</span></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span>max_n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> val<span class="token punctuation">;</span>	
<span class="token punctuation">&#125;</span>seg<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>max_n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
node <span class="token function">pull</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> node <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	node tmp<span class="token punctuation">;</span>
	tmp<span class="token punctuation">.</span>val<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>val<span class="token punctuation">,</span> y<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; "\n";</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span>
		seg<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>str<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token function">id1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token function">id2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	seg<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">pull</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span><span class="token function">id1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token function">id2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
node <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; L &lt;&lt; " " &lt;&lt; R &lt;&lt; " " &lt;&lt; id &lt;&lt;"\n";</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>L <span class="token operator">&amp;&amp;</span> r<span class="token operator">==</span>R<span class="token punctuation">)</span> <span class="token keyword">return</span> seg<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> M<span class="token operator">=</span><span class="token punctuation">(</span>L<span class="token operator">+</span>R<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;=</span>M<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token function">id1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>M<span class="token operator">&lt;</span>l<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">,</span><span class="token function">id2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">pull</span><span class="token punctuation">(</span>
		<span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>M<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token function">id1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">query</span><span class="token punctuation">(</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">,</span><span class="token function">id2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">==</span>R<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		seg<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>v<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> M<span class="token operator">=</span><span class="token punctuation">(</span>L<span class="token operator">+</span>R<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">,</span>L<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token function">id1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>M<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">,</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">,</span><span class="token function">id2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	seg<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">pull</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span><span class="token function">id1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token function">id2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	jizz<span class="token punctuation">;</span>
	<span class="token keyword">int</span> T<span class="token punctuation">,</span>N<span class="token punctuation">,</span>de<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>
	cin <span class="token operator">>></span> T <span class="token operator">>></span> N<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">build</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cin <span class="token operator">>></span> de <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>de<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>資料結構</category>
      </categories>
      <tags>
        <tag>2018</tag>
        <tag>線段樹</tag>
        <tag>SPOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>自定義 Overleaf</title>
    <url>/2022/06/23/%5BStylus%5D%20Overleaf%20Theme%20%E8%87%AA%E5%AE%9A%E7%BE%A9/</url>
    <content><![CDATA[<p>參考自: <a href="https://userstyles.org/styles/183490/dark-overleaf">這裡</a></p>
<p>先放上成品:</p>
<p><img src="https://i.imgur.com/KggqBu6.png" loading="lazy"></p>
<p><img src="https://i.imgur.com/tLtnmNU.png" loading="lazy"></p>
<h2 id="修改-Editor"><a href="#修改-Editor" class="headerlink" title="修改 Editor"></a>修改 Editor</h2><h3 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h3><p>由於從 <a href="https://userstyles.org/">Stylish</a> 上載下來的 CSS 是有瑕疵的，仔細觀察會發現左邊 Editor 的 Theme 沒有被修改成 Dark Mode。</p>
<p>利用 <code>filter invert</code> 負片(補色)效果將 Editor 變成 Dark Mode</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#editor</span> <span class="token punctuation">&#123;</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="Editor-加上-Background-Image"><a href="#Editor-加上-Background-Image" class="headerlink" title="Editor 加上 Background Image"></a>Editor 加上 Background Image</h3><p><del>渴望油油嗎</del> OwO</p>
<p>此時將 background 加上後會發生背景圖片也被 invert 了 !!!</p>
<p>因此 invert 回來。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ace_scroller</span> <span class="token punctuation">&#123;</span>
	<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://i.imgur.com/6OR1oUa.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
	<span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="將-Layer-層的-Text-Invert-回來"><a href="#將-Layer-層的-Text-Invert-回來" class="headerlink" title="將 Layer 層的 Text Invert 回來"></a>將 Layer 層的 Text Invert 回來</h3><p>你會發現增加 background 後加上 invert 會導致文字層也被補色，因此針對文字層做 invert。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ace_layer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="左側行號顏色改變"><a href="#左側行號顏色改變" class="headerlink" title="左側行號顏色改變"></a>左側行號顏色改變</h3><p>做到這了，你是否發現左邊行號顏色十分的淡?</p>
<p>那就針對他改顏色。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.ace_gutter-cell</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.9<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.ace_gutter-cell:hover</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #f0ff00<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="附上完成的-Theme-css"><a href="#附上完成的-Theme-css" class="headerlink" title="附上完成的 Theme.css"></a>附上完成的 Theme.css</h2><p>針對一些顏色與透明度的細節調整就大功告成了 !!!</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@-moz-document</span> <span class="token function">url-prefix</span><span class="token punctuation">(</span><span class="token string">"https://www.overleaf.com/"</span><span class="token punctuation">)</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token selector">.pdf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #151515<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.pdfjs-viewer</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>0.89<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.pdf-viewer .pdfjs-viewer canvas</span> <span class="token punctuation">&#123;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>0.95<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>0.95<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #138a07<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu a:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #138a07 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls label</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #999 <span class="token important">!important</span>   
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #999 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #138a07 <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>0.95<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls:hover select:focus</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">outline-color</span><span class="token punctuation">:</span> #EC75F8<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls:hover select</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>0.95<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls select:focus</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">outline-color</span><span class="token punctuation">:</span> #EC75F8<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#left-menu .form-controls select option</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #151515<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.site-footer *</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #222 <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">border-top-color</span><span class="token punctuation">:</span> #1A1A1A <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-main</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #151515<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.card</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">tr.project-list-table-row:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.content</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #151515<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.loading-screen</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #151515<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table-name, .project-list-table-name-link</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #E3F7FC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table-name-link:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #E3F7FC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table-name-link:focus</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">brightness</span><span class="token punctuation">(</span>0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">outline-color</span><span class="token punctuation">:</span> #E3F7FC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table-actions-cell div button</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #E3F7FC <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.project-list-table-actions-cell div button:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">brightness</span><span class="token punctuation">(</span>0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">element.style</span> <span class="token punctuation">&#123;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Lucida Console"</span><span class="token punctuation">,</span> <span class="token string">"Source Code Pro"</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#editor</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ace-editor-wrapper .ace-editor-body</span> <span class="token punctuation">&#123;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ace_scroller</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://i.imgur.com/6OR1oUa.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>
        <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ace_gutter-cell</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> 0.9<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ace_gutter-cell:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #f0ff00<span class="token punctuation">;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ace_layer</span> <span class="token punctuation">&#123;</span>
        <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ace_editor</span> <span class="token punctuation">&#123;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">font</span><span class="token punctuation">:</span> 12px/normal <span class="token string">'Monaco'</span><span class="token punctuation">,</span> <span class="token string">'Menlo'</span><span class="token punctuation">,</span> <span class="token string">'Ubuntu Mono'</span><span class="token punctuation">,</span> <span class="token string">'Consolas'</span><span class="token punctuation">,</span> <span class="token string">'source-code-pro'</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>
        <span class="token property">direction</span><span class="token punctuation">:</span> ltr<span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
        <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Plugin Template</category>
      </categories>
      <tags>
        <tag>2022</tag>
        <tag>CSS</tag>
        <tag>Stylus</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1410. Comiket</title>
    <url>/2018/12/22/%5BTIOJ%5D%201410.%20Comiket/</url>
    <content><![CDATA[<p>題目來源：<a href="https://tioj.ck.tp.edu.tw/problems/1410">https://tioj.ck.tp.edu.tw/problems/1410</a><br>我的想法很直觀，就是用array儲存入和出的人(記得出的時間點也算，所以要加1)，然後掃過去紀錄時間軸的max值。</p>
<p>PS:我最後發現我這樣寫不管是時間上還是空間上都很爛，所以我去看了幾位大神的寫法才發現這題可以用離散化或是用map揍掉 m(_ _)m</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">gcc <span class="token function">optimize</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOS</span> <span class="token expression">ios_base<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TO</span> <span class="token expression">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    IOS<span class="token punctuation">;</span>TO<span class="token punctuation">;</span>
    <span class="token keyword">int</span> range<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">,</span>maxu<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>maxu<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            b<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
            str<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            range<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>range<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            maxu<span class="token operator">+=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxu<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>TIOJ</tag>
        <tag>2018</tag>
        <tag>前綴和</tag>
        <tag>時間標記</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Logiops and Customize in Ubuntu</title>
    <url>/2022/02/26/%5BUbuntu%2020.04%5D%20Install%20Logiops%20and%20Customize%20in%20Ubuntu/</url>
    <content><![CDATA[<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>Driver: <a href="https://github.com/PixlOne/logiops">Logiops project address</a><br>Compatible Devices: <a href="https://github.com/PixlOne/logiops/blob/master/TESTED.md">Check here</a><br>Logiops wiki: <a href="https://github.com/PixlOne/logiops/wiki">Check Here</a></p>
<h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>This project requires a C++14 compiler, <code>cmake</code>, <code>libevdev</code>, <code>libudev</code>, and <code>libconfig</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> cmake libevdev-dev libudev-dev libconfig++-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Clone <a href="https://github.com/PixlOne/logiops">this</a></p>
<h2 id="Building"><a href="#Building" class="headerlink" title="Building"></a>Building</h2><ol>
<li><p>Enter directory</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> logiops<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>Compile project</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> build
$ <span class="token builtin class-name">cd</span> build
$ cmake <span class="token punctuation">..</span>
$ <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>Install</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>Something you will like …</p>
<ul>
<li>Set the daemon to start at boot<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now logid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>Check the running status<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">service</span> logid status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://i.imgur.com/mXcQTTT.png" loading="lazy"></li>
<li>Restart<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">service</span> logid restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Check-CID-Control-IDs"><a href="#Check-CID-Control-IDs" class="headerlink" title="Check CID (Control IDs)"></a>Check CID (Control IDs)</h2></li>
</ul>
</li>
</ol>
<p>Check CID that your mouse support.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> logid -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>will be like … (All CIDs and it’s corresponding function are in <a href="https://github.com/PixlOne/logiops/wiki/CIDs">CIDs List</a>)</p>
<p><img src="https://i.imgur.com/WgE59mU.png" loading="lazy"></p>
<h2 id="Configuration-File"><a href="#Configuration-File" class="headerlink" title="Configuration File"></a>Configuration File</h2><p>Your default configuration file is located in <code>/etc/logid.cfg</code>.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># If you have logid.cfg</span>
$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/logid.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>However, if you didn’t find it, why not new one. (lol)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># If you didn't find logid.cfg</span>
$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/logid.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>You can customize it on your own !!! OwOb<br>This is official configuration file syntax detailed reference: <a href="https://github.com/PixlOne/logiops/wiki/Configuration">Check here</a><br>Or you can refer to mine.</p>
<ul>
<li>device name: <ul>
<li>Mine: Wireless Mobile Mouse MX Anywhere 2S</li>
<li>Check your <a href="https://github.com/PixlOne/logiops/blob/master/TESTED.md">Compatible Devices</a></li>
</ul>
</li>
<li>keys: <ul>
<li>Mine input event:<ul>
<li>forward/back button: Switch desktop</li>
<li>left/right scroll: Switch page</li>
<li>etc …</li>
</ul>
</li>
<li>Check what input event you want: <a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h?fbclid=IwAR0oABkgq30BDnmV2LCanjIemtGdmGIVcCrwc4p0vzC5ftiJnJiqAHLgt7k">Here</a></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">devices: (
&#123;
    name: "Wireless Mobile Mouse MX Anywhere 2S";
    buttons: (
        &#123;
            cid: 0x56;
            <span class="token key attr-name">action</span> <span class="token punctuation">=</span>
            &#123;
                type: "Keypress";
                keys: ["KEY_LEFTCTRL","KEY_LEFTALT","KEY_RIGHT"];
            &#125;;
        &#125;,
        &#123;
            cid: 0x53;
            <span class="token key attr-name">action</span> <span class="token punctuation">=</span>
            &#123;
                type: "Keypress";
                keys: ["KEY_LEFTCTRL","KEY_LEFTALT","KEY_LEFT"];
            &#125;;
        &#125;,
        &#123;
            cid: 0x5b;
            <span class="token key attr-name">action</span> <span class="token punctuation">=</span>
            &#123;
                type: "Keypress";
                keys:["KEY_LEFTCTRL","KEY_PAGEUP"];
            &#125;;
        &#125;,
        &#123;
            cid: 0x5d;
            <span class="token key attr-name">action</span> <span class="token punctuation">=</span>
            &#123;
                type: "Keypress";
                keys:["KEY_LEFTCTRL","KEY_PAGEDOWN"];
            &#125;;
        &#125;,
        &#123;
            cid: 0xd7;
            <span class="token key attr-name">action</span> <span class="token punctuation">=</span>
            &#123;
                type: "Gestures";
                gestures:(
                &#123;
                    direction:"Up";
                    <span class="token key attr-name">mode</span><span class="token punctuation">=</span><span class="token value attr-value">"OnInterval";</span>
                    <span class="token key attr-name">interval</span><span class="token punctuation">=</span><span class="token value attr-value">75;</span>
                    <span class="token key attr-name">action</span><span class="token punctuation">=</span>
                    &#123;
                        type:"Keypress";
                        keys:["KEY_VOLUMEUP"];
                    &#125;
                &#125;,
                &#123;
                    direction:"Down";
                    <span class="token key attr-name">mode</span><span class="token punctuation">=</span><span class="token value attr-value">"OnInterval";</span>
                    <span class="token key attr-name">interval</span><span class="token punctuation">=</span><span class="token value attr-value">75;</span>
                    <span class="token key attr-name">action</span><span class="token punctuation">=</span>
                    &#123;
                        type:"Keypress";
                        keys:["KEY_VOLUMEDOWN"];
                    &#125;
                &#125;,
                &#123;
                    direction:"Left";
                    <span class="token key attr-name">mode</span><span class="token punctuation">=</span><span class="token value attr-value">"OnRelease";</span>
                    <span class="token key attr-name">action</span><span class="token punctuation">=</span>
                    &#123;
                        type:"Keypress";
                        keys:["KEY_LEFTCTRL","KEY_C"];
                    &#125;
                &#125;,
                &#123;
                    direction:"Right";
                    <span class="token key attr-name">mode</span><span class="token punctuation">=</span><span class="token value attr-value">"OnRelease";</span>
                    <span class="token key attr-name">action</span><span class="token punctuation">=</span>
                    &#123;
                        type:"Keypress";
                        keys:["KEY_LEFTCTRL","KEY_V"];
                    &#125;
                &#125;,
                &#123;
                    direction:"None";
                    <span class="token key attr-name">mode</span><span class="token punctuation">=</span><span class="token value attr-value">"OnRelease";</span>
                    <span class="token key attr-name">action</span><span class="token punctuation">=</span>
                    &#123;
                        type:"Keypress";
                        keys:["KEY_ENTER"];
                    &#125;
                &#125;
                )
            &#125;;
        &#125;

    );
    hiresscroll:
    &#123;
        hires: true;
        invert: false;
        target: true;
        up: &#123;
            mode: "Axis";
            axis: "REL_WHEEL_HI_RES";
            axis_multiplier: 2;
        &#125;,
        down: &#123;
            mode: "Axis";
            axis: "REL_WHEEL_HI_RES";
            axis_multiplier: -2;
        &#125;,
    &#125;
&#125;
);


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2022</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>調 Ubuntu 20.04 時採的坑</title>
    <url>/2021/10/18/%5BUbuntu%2020.04%5D%20%E8%AA%BF%20Ubuntu%2020.04%20%E6%99%82%E6%8E%A1%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="Dash-to-Dock-Can’t-make-and-make-install"><a href="#Dash-to-Dock-Can’t-make-and-make-install" class="headerlink" title="Dash to Dock Can’t make and make install"></a>Dash to Dock Can’t <code>make</code> and <code>make install</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> sassc
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gettext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="Dash-to-Dock-Somthing’s-gone-wrong"><a href="#Dash-to-Dock-Somthing’s-gone-wrong" class="headerlink" title="Dash to Dock : Somthing’s gone wrong"></a>Dash to Dock : Somthing’s gone wrong</h2><p>According to this link <a href="https://github.com/micheleg/dash-to-dock/issues/1445">Github issue : Unable to use the extension #1445</a><br>We know that Dash to Dock doesn’t support Gnome 40 yet.<br>And Tuxman2 said that,</p>
<blockquote>
<p>Note: I took the Dash to dock extension from here: <a href="https://github.com/ewlsh/dash-to-dock/tree/ewlsh/gnome-40">https://github.com/ewlsh/dash-to-dock/tree/ewlsh/gnome-40</a><br>That version works with Gnome 40. Of course, it is not perfect yet (some bugs) but it does the job.</p>
</blockquote>
<blockquote>
<p>@Sidpatchy: <strong>Dash to Dock extension works with Gnome 40 but you must take the version from Ewlsh and not from Micheleg.</strong></p>
</blockquote>
<h2 id="Cannot-turn-on-Tweak-User-Themes-and-Shell-button-locked"><a href="#Cannot-turn-on-Tweak-User-Themes-and-Shell-button-locked" class="headerlink" title="Cannot turn on Tweak User Themes and Shell button locked"></a>Cannot turn on Tweak User Themes and Shell button locked</h2><p>The first problem is the <code>Tweak &gt; Appearance &gt; Shell (Locked by the triangle mark) </code><br><strong>Solution</strong> : Go to <code>Tweak &gt; Extension &gt; (Turn on) User Themes</code><br>The second problem is “After I turn on the User Themes, it will turn of by itself.”.<br>Hence, refer to this <a href="https://ubuntuhandbook.org/index.php/2017/05/enable-shell-theme-in-gnome-tweak-tool-in-ubuntu/">https://ubuntuhandbook.org/index.php/2017/05/enable-shell-theme-in-gnome-tweak-tool-in-ubuntu/</a><br>Open terminal (Ctrl + Alt + T)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> chrome-gnome-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>go to <a href="https://extensions.gnome.org/extension/19/user-themes/">https://extensions.gnome.org/extension/19/user-themes/</a> and turn on the button.</p>
<h2 id="What-is-sudo-nautilus"><a href="#What-is-sudo-nautilus" class="headerlink" title="What is sudo nautilus"></a>What is <code>sudo nautilus</code></h2><p>Nautilus is a file manager in Ubuntu.<br>When you type the command <code>sudo nautilus</code> , you are entering the file manager as a root.</p>
<h2 id="VSCode-transparent"><a href="#VSCode-transparent" class="headerlink" title="VSCode transparent"></a>VSCode transparent</h2><h3 id="Devilspie"><a href="#Devilspie" class="headerlink" title="Devilspie"></a>Devilspie</h3><p>參考資料：<a href="https://www.youtube.com/watch?v=PzObHq72Vug&t=301s&ab_channel=ThatDevOpsGuy">這裡</a><br>以下程式碼複製貼上至 Terminal</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> devilspie
$ <span class="token function">mkdir</span> -p ~/.devilspie
$ <span class="token builtin class-name">echo</span> <span class="token string">'
(if (contains (window_class) "Code")
	(begin
		(spawn_async (str "xprop -id " (window_xid) " -f _KDE_NET_WM_BLUR_BEHIND_REGION 32c -set _KDE_NET_WM_BLUR_BEHIND_REGION 0 "))
		(spawn_async (str "xprop -id " (window_xid) " -f _NET_WM_WINDOW_OPACITY 32c -set _NET_WM_WINDOW_OPACITY 0xD8000000"))
	)
)
'</span> <span class="token operator">></span> ~/.devilspie/vscode_transparent.ds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用前前往 Terminal</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ devilspie<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就可以啟動了</p>
<h3 id="Auto-Start-Devilspie"><a href="#Auto-Start-Devilspie" class="headerlink" title="Auto Start Devilspie"></a>Auto Start Devilspie</h3><p><code>vim ~/.config/autostart/devilspie.desktop</code></p>
<pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]
Name&#x3D;&quot;devilspie&quot;
GenericName&#x3D;&quot;devilspie&quot;
Comment&#x3D;&quot;is this necesery?&quot;
Exec&#x3D;&#x2F;usr&#x2F;bin&#x2F;devilspie
Terminal&#x3D;false
Type&#x3D;Application
X-Gnome-Autostart&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>:wq</code> 就完成了</p>
<h2 id="Ubuntu-20-04-Lock-screen-background-cannot-change"><a href="#Ubuntu-20-04-Lock-screen-background-cannot-change" class="headerlink" title="Ubuntu 20.04 Lock screen background cannot change"></a>Ubuntu 20.04 Lock screen background cannot change</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libglib2.0-dev-bin
$ <span class="token function">git</span> clone https://github.com/thiggy01/change-gdm-background.git
$ <span class="token function">chmod</span> +x change-gdm-background
$ <span class="token builtin class-name">cd</span> change-gdm-background
$ <span class="token function">sudo</span> ./change-gdm-background <span class="token punctuation">[</span>your image path<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Line 5 <strong>[ your image path ]</strong> : 可以用 <code>sudo nautilus</code> 進去 <code>/usr/share/backgrounds</code> 把你想要更換的桌布放進去。</li>
</ul>
<p>詳細的可以參考以下這兩篇</p>
<ul>
<li><a href="https://www.linuxmadesimple.info/2020/08/how-to-change-login-picture-in-ubuntu.html">How to change the login picture in Ubuntu 20.04</a></li>
<li><a href="https://www.youtube.com/watch?v=KY6uB3lUT8s&ab_channel=linuxmadesimple">How to change the login picture in Ubuntu 20.04 (Youtube)</a></li>
</ul>
<h2 id="雜項"><a href="#雜項" class="headerlink" title="雜項"></a>雜項</h2><h3 id="Vimrc-配置"><a href="#Vimrc-配置" class="headerlink" title="Vimrc 配置"></a>Vimrc 配置</h3><p>我是參考 <a href="https://blog.smallten.tk/">余原齊</a> 電神的文章 <a href="https://hackmd.io/@Adam7066/SJ5ERzgHv">Use Vim as IDE</a></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo架出第一個Blog</title>
    <url>/2020/10/11/%E5%88%A9%E7%94%A8Hexo%E6%9E%B6%E5%87%BA%E7%AC%AC%E4%B8%80%E5%80%8BBlog/</url>
    <content><![CDATA[<p>我之前都是用google的Blogger，如今我想架出自由度高的Blog（<del>好啦，就是想要很油很宅的Blog啦</del>），於是就被我<a href="https://theriseofdavid.github.io/">學長</a>推坑用Hexo。</p>
<p><a href="https://hexo.io/zh-tw/">關於Hexo</a></p>
<h2 id="美中不足之處"><a href="#美中不足之處" class="headerlink" title="美中不足之處"></a>美中不足之處</h2><p>我用的themes是Diaspora(<del>一個很適合放很多油圖的themes</del>)，但是有些小缺陷如下：</p>
<ol>
<li>Markdown的<strong>語法行號</strong>和<strong>粗體字</strong>無法好好的顯示。</li>
<li>hitokoto(一言)需要手動去<code>diaspora.js</code>自行調整，首先要對javascript的string用法要熟悉。</li>
<li>如果是繁體字使用者，需要去很多地方改成繁體字-&gt; <code>themes/diaspora/layout/</code></li>
</ol>
<h3 id="解決方法如下"><a href="#解決方法如下" class="headerlink" title="解決方法如下"></a>解決方法如下</h3><ol>
<li><ul>
<li><strong>行號不出現的問題</strong> -&gt; 到 <code>source/css/diaspora.css</code> 裡把 <code>.content .gutter &#123;display:none;&#125;</code> 改成 <code>.content .gutter &#123;display:table;&#125;</code></li>
<li><strong>無法粗體字</strong>-&gt;<code>source/css/diaspora.css</code>裡把<code>.content strong &#123;font-weight:500;&#125;</code>刪掉。</li>
</ul>
</li>
<li><ul>
<li><strong>hitokoto</strong> -&gt; 直接去<code>source/js/diaspora.js</code>裡改他的string。</li>
</ul>
</li>
</ol>
<h2 id="有關Diaspora的套用"><a href="#有關Diaspora的套用" class="headerlink" title="有關Diaspora的套用"></a>有關Diaspora的套用</h2><p>相信我，沒有什麼比看原作的流程更詳細的。</p>
<p><a href="https://github.com/Fechin/hexo-theme-diaspora">Diaspora連結</a></p>
<h2 id="有關架網站的總過程"><a href="#有關架網站的總過程" class="headerlink" title="有關架網站的總過程"></a>有關架網站的總過程</h2><p>我大多是看這篇學的 -&gt; <a href="https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db">如何搭建個人 Blog 使用 Hexo + Gitpage</a></p>
<p>如果想把 <code>favicon</code> 跟 <code>logo</code> 換成自己的話，我個人是用<a href="http://www.akuziti.com/">這個網站</a>生成自己想要的字體圖檔，然後再去 <code>themes/diaspora/source/css/diaspora.css</code> 把 <code>.image-logo</code> 的px改成自己所需的，但理論上 <code>favicon</code> 64px就行了，logo則是要去css檔裡修改（看你的logo多長啦）。</p>
<p>還有，如果想在每一篇文章都放圖片的話，那就在<code>_posts</code>的<code>md</code>檔裡的<code>yaml</code>部份加上<code>cover: /img/....jpg</code></p>
<p>舉例：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---
title: SOJ 43 Lacy 路網
date: 2018-08-16 15:46:00
categories: 演算法
welcome_cover: false
cover: &#x2F;img&#x2F;SOJ43.jpg
tags: 
- SOJ
- MST
- 並查集
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果想要讓首頁圖片跟著分類一起片換的話（也就是當那篇文章是第一個時，以那一篇cover為當前封面）</p>
<p>那就把<code>themes/_config.yml</code>裡的<code>welcome_cover: .../</code>給註記掉<code>#welcome_cover: .../</code></p>
<p>另外，記得每個<code>md</code>的<code>yaml</code>的<code>title</code>部份，名字絕對不要有<code>[ ]</code>符號，不然會出錯。</p>
<h2 id="如何將你的-Hexo-Github-Pages"><a href="#如何將你的-Hexo-Github-Pages" class="headerlink" title="如何將你的 Hexo + Github Pages"></a>如何將你的 Hexo + Github Pages</h2><p>我是看這篇的。</p>
<p><a href="https://ed521.github.io/2019/07/hexo-install/">使用 GitHub Pages + Hexo 來架設個人部落格</a></p>
<p><strong>但切記：我犯了一個重大的錯誤，就是建repo時一定要<code>&lt;username&gt;.github.io</code>，我就是因為取錯repo的名字導致我的網站爛掉。</strong></p>
<h2 id="當你要npm-install-hexo-deployer-git-save時吃了Warning"><a href="#當你要npm-install-hexo-deployer-git-save時吃了Warning" class="headerlink" title="當你要npm install hexo-deployer-git --save時吃了Warning"></a>當你要<code>npm install hexo-deployer-git --save</code>時吃了Warning</h2><p>這篇一定可以幫助到你。</p>
<p><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/682735/">為什麼npminstall的時候會顯示嚴重漏洞</a></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>大學面試總心得</title>
    <url>/2020/04/26/%E5%A4%A7%E5%AD%B8%E9%9D%A2%E8%A9%A6%E7%B8%BD%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/IeHQ56h.jpg" loading="lazy"></p>
<h2 id="交大資工-APCS組-面試-amp-心得-4-23"><a href="#交大資工-APCS組-面試-amp-心得-4-23" class="headerlink" title="交大資工(APCS組)(面試&amp;心得)(4/23)"></a>交大資工(APCS組)(面試&amp;心得)(4/23)</h2><p>這是我的備審<br>連結：<a href="https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv">https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv</a><br>備註我的學測成績(國11 數14 英14 自11)</p>
<p>由左到右ABC三個教授，B是主面試官，也是競賽指導的教授，C聽說是資安的教授。<br>自介1分鐘，但我介紹1分半。</p>
<hr>
<p>教授A ：你接觸演算法時所運用的讀書方法。</p>
<p>教授 B ：請說明在資訊之芽學習最深刻的演算法。</p>
<p>教授 B ：請說具體的題目。</p>
<p>教授 B ：那你覺得你不擅長的是什麼？</p>
<p>我        ：是指哪個方面的？</p>
<p>教授 B ：在資訊之芽時的演算法。</p>
<p>教授 C ：請說明一下你發現app store 的付費漏洞。</p>
<p>教授 B ：你是怎麼發現這個漏洞的？</p>
<p>教授 B ：你有打Codeforces喔？目前如何？</p>
<p>我         ：我綠人</p>
<p>教授 B ：為什麼這樣？</p>
<p>我         ：英文讀題比較慢，別人兩三分鐘一題，我要十幾分鐘</p>
<p>教授B  ：可是題目很短（？</p>
<p>我         ：我近期打的比賽是長的QAQ</p>
<p>教授 A ：考APCS有先做準備嗎？</p>
<p>回答完後七分鐘剛好到，被敲門了。</p>
<p>教授B  ：好，按右邊的按鈕開門</p>
<hr>
<p>嘛……教授A的第一題我回答到腦袋空掉，突然想起陳威達學長說的『不要太緊張，不然面試時腦袋會空白，然後就會覺得越來越可怕』，此時輪到教授B時我就回歸正常，後面都回答得蠻順的，但是有一點尬聊，因為每次回答完一個問題，就會安靜個十幾秒(因為教授們在翻備審找題目問我，面試後聽說其他人也有)。面完試後跟吳邦寧、韋詠祥(Sean)等人聊天吃飯。有被問家裡住所的 ; 有被電的，我好想被電啊，被電都會入取 &gt;&lt;。然後等客運時遇到一位媽媽帶女兒來面試，聊一聊發現她也是來交大資工APCS的面試，聽她媽說她是唯一女的(? 為啥我去哪面試都會遇到女的OAO</p>
<hr>
<p>5/1附記：備取13 QAQ</p>
<hr>
<h2 id="臺師大-APCS組-面試-4-26"><a href="#臺師大-APCS組-面試-4-26" class="headerlink" title="臺師大 (APCS組)(面試)(4/26)"></a>臺師大 (APCS組)(面試)(4/26)</h2><p>這是我的備審<br>連結：<a href="https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt">https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt</a><br>備註我的學測成績(國11 數14 英14 自11)</p>
<p>因為臺師大校園內疫情的關係，所以改為不面試並調整分數的比例<br>(學測：45%，書審：25%，APCS：30%)</p>
<p>至於面試的部分，以下我會放面試前我跟108學年有參加臺師大資工(APCS組)的學長姐請教的問題與回答。</p>
<p>這是我給學長姐們的問題：<br>       你好，我是來自新北市時雨高中的蘇子權，懇請讓我借用你一些時間問一些關於臺師大APCS口試的準備指引。<br>       我希望能透過你了解一些面試時的「注意狀況與細節」和「問題導向」，因為我不確定口試時是會問關於「備審的內容」還是「演算法的問題」還是「單純像一些大學的資工乙組的聊聊天，用學測與在校成績評斷」（我認為應該不會是後者）。<br>       我們學校的老師一直說前面的大學注重的是課業（我的老師認為簡章上只是形式上寫寫的）。<br>       我的學測成績不好、數學也只有14、在校成績也不是很好，只有資訊競賽跟相關活動比較豐富（可是我資奧也不是打得很好），因此我想請教一下大致上口試的狀況，並且設法在口試時翻身。非常的謝謝你。</p>
<p>其中一位學長給我這篇文章<br>連結：<a href="https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc">https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc</a></p>
<p>其中一位學姊提供她的經驗<br>        我覺得照你說的你的條件是比我好的。<br>        我學測自然四科48 數學12 英文11 在校就普普 資訊競賽雖然看起來很多 但沒甚麼成績 資奧我那時候只有壓線拿到去考初選的資格而已。<br>        然後師大面試整體我覺得是比較輕鬆的 聽我同學說 一般組的還會有一些小測驗 類似海貍那種題目。<br>        但APCS完全沒有。<br>        那時候就是第一間進去有兩個教授 會問一些備審上面的問題然後叫你自介 但不是學術向問題 比較像是認識你那種。<br>        第二間就是跟教授聊聊天的感覺。</p>
<hr>
<p>5/7更新放榜結果：正取1</p>
<hr>
<h2 id="長庚資工-面試-4-18"><a href="#長庚資工-面試-4-18" class="headerlink" title="長庚資工(面試)(4/18)"></a>長庚資工(面試)(4/18)</h2><p>這是我的備審<br>連結 : <a href="https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW">https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW</a><br>備註我的學測成績(國11 數14 英14 自11)</p>
<p>面試時間大概10-12分鐘</p>
<p>教授：請各位大概用3-4分鐘自介<br>以下依序為教授問的題目</p>
<ol>
<li>程式語言是什麼？如果沒有程式人類會變得怎麼樣？(這題是搶答)</li>
<li>你學過哪些程式，如何1加到100？ (這題是教授想從左往右答)</li>
<li>有什麼問題想問教授？(最後只有我問)<br> 我：請問有沒有icpc競賽和校內培訓</li>
</ol>
<p>結論：<br>        我跟三個女的一起面試，可能是因為這樣，所以被問到的題目非常簡單(沒有性別歧視的意味，只是去年都問很多思考性的問題，但今年卻都是問題庫的題目，所以這只是我單方面的結論。)</p>
<hr>
<p>5/1附記：正取8</p>
<hr>
<h2 id="長庚電機-面試-4-25"><a href="#長庚電機-面試-4-25" class="headerlink" title="長庚電機 (面試)(4/25)"></a>長庚電機 (面試)(4/25)</h2><p>這是我的備審：<br>連結：<a href="https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g">https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g</a><br>備註我的學測成績(國11 數14 英14 自11)</p>
<p>（沒有自介）<br>有三間教室（各一個教授，有點像跑班的概念）<br>第一間教室（聊天教室）<br>就是問很多個人狀況，先問一些基本的資料，反正就是想認識你；想了解你有沒有在打程式；想知道你有沒有考APCS；想知道你有沒有在玩資訊相關的社團，人很友善。<br>第二間教室（專業題一題）<br>我被問到「電話是如何運作，並如何將聲音與訊號互相轉換？」<br>第三間教室（考英文聽說讀這三個）</p>
<ol>
<li>先看投影片上三句英文10秒，再用15秒內的時間念投影片上三句英文。</li>
<li>再來聽不到10秒的英文錄音檔。<br>（錄音檔聲音超模糊，但不用緊張，教授會一段一段跟你解釋）</li>
<li>5題選一題文章，看15秒，然後翻譯整篇。</li>
</ol>
<hr>
<p>5/1附記：正取25</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>面試</tag>
        <tag>高中</tag>
      </tags>
  </entry>
  <entry>
    <title>程設(一) 作業1 有趣有用的小東西,心得</title>
    <url>/2020/10/09/%E7%A8%8B%E8%A8%AD(%E4%B8%80)%20%E4%BD%9C%E6%A5%AD1%20%E6%9C%89%E8%B6%A3%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E6%9D%B1%E8%A5%BF,%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<ol>
<li><strong>由於高中的資訊課從來都沒有L紀的課那麼<del>毒瘤</del>有趣，在寫功課中有感而發而寫了這篇有趣的小東西與大家分享，如果有各方大神有超毒瘤或有趣的玩法記得傳教我OwO</strong></li>
<li><strong>至於以後有遇到有趣的東東就會再寫，但功課解析不會再有（除非那題很毒瘤或有趣）</strong></li>
<li><strong>近期我會盡快架個Blog，有趣的東東都會放在Blog上，希望往後大家能多多造訪Orz</strong></li>
<li><strong>友情連結 -&gt;</strong> <a href="https://blog.jw910731.wtf/blog/">吳文元的Blog</a> <h2 id="先淺談一些有趣的東西"><a href="#先淺談一些有趣的東西" class="headerlink" title="先淺談一些有趣的東西"></a>先淺談一些有趣的東西</h2>為什麼我要先寫有趣的東西呢？因為大部分是寫功課過程中學到的，小部份只是想順道跟大家分享。</li>
</ol>
<blockquote>
<p>懶惰就都define起來啊OwO</p>
</blockquote>
<p>習慣打int的我，就</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token class-name">int32_t</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>C語言中沒有布林？（這篇是之前寫的，下一週上課剛好就被提到）</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>上課毒L紀說給你錯的輸入格式（？判掉它OAO</p>
</blockquote>
<p>我喜歡的寫法</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%..."</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//"..."是指輸入多少量</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input correct format!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> c<span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>sad之神吳文元喜歡的精簡寫法</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%..."</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//"..."是指輸入多少量</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input correct format!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>為什麼會有人main函式寫signed main() ?</p>
</blockquote>
<p><del>別問你會怕OwO</del><br>好啦，其實C99 ISO/IEC 9899:1999第99,100頁有規定到（如圖）<br><img src="https://i.imgur.com/yyx8gfb.png" loading="lazy"></p>
<p>就像把<code>long long int</code>打成<code>long long</code>一樣啦，<strong>粗略來說</strong>就是名字不一樣但性質一樣。</p>
<p>用途就是有人跟我一樣毒瘤到懶的開<code>long long</code>時就<code>#define int long long</code>。</p>
<p>這時就要談到main為什麼只回傳int了 QAQ</p>
<p>又是很毒的C規定標準-&gt; ISO/IEC 9899:201x 第13頁的<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">Program startup</a>有規定。</p>
<p>然後第14頁的<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">Program termination</a>有講到<code>main()</code>回傳的<code>return</code>值會丟給<code>exit()</code>。</p>
<p>PS: <code>return</code>是調用堆疊（函數退出），<code>exit</code>是系統調用（進程退出）。</p>
<p>通常<code>return 0</code>是成功，<code>return 1</code><strong>可能</strong>表示失敗，回傳值丟給<code>exit()</code>後會告訴使用者</p>
<p><strong>exit(0)正常結束</strong>或<strong>exit(非0)產生錯誤資訊</strong>，有定義<a href="https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html">system exit</a>回傳數字是什麼意思。</p>
<p><strong>上面看不懂沒關係，因為總結起來如下面程式碼一樣簡單又簡潔OwO(<del>文元不要打我</del>)</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<blockquote>
<p>你不知道為什麼scanf編譯時吃了warning?</p>
</blockquote>
<p><img src="https://i.imgur.com/S3q1XnO.png" loading="lazy"></p>
<p>其實scanf是會回傳值的，只是單純警告你忽略了回傳值（就像宣告了一個變數，但整個程式都沒用到它，就會給你一個warning提醒使用者），在這點到為止，有興趣的看<a href="https://stackoverflow.com/questions/10043841/c-error-ignoring-return-value-of-scanf">這裡</a>，-Wunused-result看<a href="https://stackoverflow.com/questions/40576003/ignoring-warning-wunused-result">這裡</a>。</p>
<blockquote>
<p>題目要求連續輸入直到EOF時(End of File)(ctrl+z是Windows的EOF)(ctrl+d是Linux的EOF)</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//正常寫法</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//毒瘤寫法（黑魔法）</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>好啦，其實不是黑魔法，’~’符號只是位元運算子的「not」</p>
<p>舉例 a=101001 ; b=~a ; 那麼 b=010110 (not的這個想法在hw0105的手寫部份可以用的上OwO)</p>
<p>通常EOF是系統跑到文件結尾時，所回傳的信號（-1）</p>
<ul>
<li><strong>因系統而異，不全是-1</strong></li>
</ul>
<p>然後在上面那一篇有說到scanf是會回傳值的，它回傳了EOF(-1)，並將(-1)給not</p>
<p>因此，以8位元二補數舉例表示為： ~(-1) = ~(1111 1111)(二進位) = (0000 0000)(二進位)= 0 (十進位)</p>
<p>那麼，while(~(-1)) = while(0) </p>
<ul>
<li><p><strong>提醒 : ASCII沒有負數(0~127)，因此EOF不是特殊字符。</strong></p>
</li>
<li><p><strong>EOF是被define的 -&gt; <code>#define EOF -1</code></strong></p>
</li>
</ul>
<blockquote>
<p>當你很想輸出後就直接<code>return 0</code>時(1行超讚)</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<h2 id="防雷線-以下是作業部份"><a href="#防雷線-以下是作業部份" class="headerlink" title="防雷線(以下是作業部份)"></a>防雷線(以下是作業部份)</h2><hr>
<h2 id=""><a href="#" class="headerlink" title=""></a><hw0101></h2><p>簡單的輸出題。</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><hw0102></h2><p>題目規定要5 digits，所以要判斷是否有輸入錯格式。<br>再來把輸入的數字丟進for裡，每次除以一個從10000開始每次除以10的數字，一直乘進答案裡，輸入的數字記得模掉最前面一位。</p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><hw0103></h2><p>物理算術題。</p>
<p>下面第21行的<code>%.2f</code> , <code>%.3f</code><strong>極粗略上來說</strong>是取四捨五入當第多少位，如果不足位數則補0，如果需要實做輔助看<a href="https://blog.csdn.net/wonglong01/article/details/6074887">這裡</a>。</p>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a><hw0104></h2><p>我先使用 <code>whereis stdio.h</code> 尋找 stdio.h 的 path，跟著路徑<code>/usr/include/</code>找到stdio.h後將它mv成不同名字（<code>sudo mv stdio.h stdioo.h</code>）(沒加sudo會permission denied，所以提高權限)，改完後回去直接<code>$ make clean</code> <code>$ make</code>會得到”fatal error”，不能過編。但是，如果我把程式裡的<code>#include&lt;stdio.h&gt;</code>砍掉就「可以過編」，但會吃warning，原因在於<code>[-Wimplicit-function-declaration]</code>(隱式宣告函式)也就是C語言有規定，<strong>「對於沒有宣告的函式，自動使用隱式宣告」</strong>。</p>
<p><img src="https://i.imgur.com/oHga5aJ.jpg" loading="lazy"></p>
<h2 id="-4"><a href="#-4" class="headerlink" title=""></a><hw0105></h2><h3 id="解釋10進位負數轉16進位"><a href="#解釋10進位負數轉16進位" class="headerlink" title="解釋10進位負數轉16進位"></a>解釋10進位負數轉16進位</h3><p>首先將此十進位數字部份轉成二進位，反碼後加1，4個數字一組轉成16進位（共8組）($2^{4*8}$)。</p>
<p>或是可以參考<a href="https://www.itread01.com/content/1543721235.html">這裡</a>。</p>
<h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus "></a>Bonus <hw0106></h2><p>我先使用<code>whereis cd</code>尋找cd，之後又用<code>ls /bin | grep cd</code>也找不到，於是詢問一下他的type是什麼<code>type cd</code>，出現了以下我簡化後的敘述。</p>
<pre class="line-numbers language-none"><code class="language-none">cd is a function with definition
#Defined in &#x2F;usr&#x2F;share&#x2F;fish&#x2F;functions&#x2F;cd.fish
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在fish-shell，cd是個function（因為我的是fish-shell）。<br>但如果要查bash，那<code>echo &quot;type cd&quot; | bash</code>或<code>echo &quot;type cd&quot; | sh</code>它會超貼心的說<code>cd is a shell builtin</code>。</p>
<p>PS: 讚嘆余原齊大神只用<code>which cd</code>揍掉這題m(_ _)m</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>作業</tag>
        <tag>有趣的東西</tag>
      </tags>
  </entry>
  <entry>
    <title>自定義 Stylish Plugin</title>
    <url>/2021/08/15/%5BStylus%5D%20%E8%87%AA%E5%AE%9A%E7%BE%A9%20Stylish%20Plugin/</url>
    <content><![CDATA[<p>參考自： <a href="https://userstyles.org/styles/169533/g36">這裡</a><br>並使用 Chrome 的 Plugin <a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?hl=zh-TW">Stylus</a><br>將 Stylus 安裝後，在瀏覽器由上方找到相對的圖示，點選後按<strong>管理已安裝樣式</strong>。<br>進入已安裝的樣式的頁面後，點選左邊<strong>動作</strong>欄位的<strong>編寫新樣式</strong>，輸入完名稱後，將以下原始碼複製貼上至<strong>代碼1</strong>的欄位，然後點選<strong>覆蓋樣式</strong>，並按 <code>Ctrl+S</code> 儲存。</p>
<p>參考圖片：<br><img src="https://i.imgur.com/yyFeyKj.jpg" loading="lazy"></p>
<h2 id="原始碼"><a href="#原始碼" class="headerlink" title="原始碼"></a>原始碼</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@-moz-document</span> <span class="token function">regexp</span><span class="token punctuation">(</span><span class="token string">"^http[s]?://www.google.com.*"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>
    <span class="token selector">body</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #F1F4ED <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://cdn.jsdelivr.net/gh/KutsunaSubaRya/photo@main/page.webp<span class="token punctuation">)</span></span> no-repeat fixed top right <span class="token important">!important</span><span class="token punctuation">;</span> 
        <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">background-position</span><span class="token punctuation">:</span> center <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">background-size</span><span class="token punctuation">:</span>cover <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token comment">/* color: #e6ff02 ; */</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div.ifM9O</span><span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #2869c5 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.appbar</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>transparent <span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">div.rl_feature, .rlc__slider, .rlc__slider-page</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.rl_center</span><span class="token punctuation">&#123;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> none
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.kp-blk</span><span class="token punctuation">&#123;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd .g a:hover h3</span> <span class="token punctuation">&#123;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span>none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.B6fmyf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> 8px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.NJjxre</span> <span class="token punctuation">&#123;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.aajZCb,.minidiv .aajZCb</span><span class="token punctuation">&#123;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0
    <span class="token punctuation">&#125;</span>


    <span class="token selector">.GHDvEf.ab_button,.GHDvEf.ab_button:hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> transparent
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.Wnoohf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.5<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.mnr-c  :hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>1<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
            <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.kno-ftr :hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> transparent
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.rhsvw .kno-ftr:hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#main .mw #rhs</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span> 1020px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.kp-header:first-child .kno-liu .img-kc-m,.kp-blk .kp-header:first-child .img-brk</span> <span class="token punctuation">&#123;</span>
        <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.srg .g:last-of-type</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.vk_c, .vk_cxp, .vk_ic</span><span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>104%<span class="token punctuation">;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span> -17px<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span>20px <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.vk_c:hover, .vk_cxp:hover, .vk_ic:hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.lu-fs</span><span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span>120%
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.yyjhs</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> .8<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 3px 16px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">#myuser .myuserconfig</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>transparent <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>grey  <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span>none  <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span>0 <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">margin-right</span><span class="token punctuation">:</span>10px <span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#myuser .myuserconfig:hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>transparent <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>black  <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span>0
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.minidiv .sfbg</span><span class="token punctuation">&#123;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.8<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#hdtbSum</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#hdtb</span> <span class="token punctuation">&#123;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.RNNXgb, .minidiv .RNNXgb</span><span class="token punctuation">&#123;</span>
        <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
        <span class="token property">border-width</span><span class="token punctuation">:</span> 0px 0px 1px<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.emcav .RNNXgb</span><span class="token punctuation">&#123;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #fff <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>0 0 0 2px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.sbfc</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #fff <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.1<span class="token punctuation">)</span><span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.RNNXgb:hover, .minidiv .RNNXgb:hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #fff <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
        <span class="token property">border-width</span><span class="token punctuation">:</span> 0px 0px 1px<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.aR1mEe</span><span class="token punctuation">&#123;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">g-section-with-header</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 10px 5px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">div.res_top_banner #foot,
    #page .fk,
    #head .headBlock,
    #rs_top_new,
    #content_right,
    .srg>table,
    .srg>div[id*="30"],
    .srg .c-recommend,
    .srg .leftBlock,
    .srg .hit_top_new,
    .srg #fld,
    .srg div.rrecom-btn-parent,
    #content_right,
    #demo</span> <span class="token punctuation">&#123;</span>
        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">body[google]</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span>#fdfdfd
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#form .bdsug</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>76%
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#ala_img_results</span> <span class="token punctuation">&#123;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span>hidden
    <span class="token punctuation">&#125;</span>
    <span class="token selector">a,
    a em</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span>none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#head,
    #s_tab</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span>#f8f8f8   
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#head</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>0
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#form</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span>unset
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#form .bdsug li</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span>
        <span class="token property">font</span><span class="token punctuation">:</span>15px arial<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span>26px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#form .s_ipt_wr.bg</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>76%
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#form .s_btn</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>#2866bd<span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>1px solid #4879bd
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#form .s_btn:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>#4879bd<span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>1px solid #2866bd
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#s_tab b</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#2866bd<span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>3px #2866bd solid
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#s_tab</span> <span class="token punctuation">&#123;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>#e0e0e0 1px solid
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#u a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span>none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#container .head_nums_cont_outer .search_tool_conter,
    #container .head_nums_cont_outer .nums</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>630px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#search .srg,
    .med>#ires .bkWMgd>.srg</span> <span class="token punctuation">&#123;</span>
        <span class="token property">animation-name</span><span class="token punctuation">:</span>left_logoR<span class="token punctuation">;</span>
        <span class="token property">-webkit-animation-duration</span><span class="token punctuation">:</span>.1s<span class="token punctuation">;</span>
        <span class="token property">-webkit-animation-timing-function</span><span class="token punctuation">:</span>ease
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs,
    .bkWMgd .g</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>760px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>0 20px 15px<span class="token punctuation">;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.05<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs,
    .bkWMgd .g div.rc .s</span> <span class="token punctuation">&#123;</span>
        <span class="token property">max-width</span><span class="token punctuation">:</span>unset
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd .g:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd .g[tpl=soft] .op-soft-title,
    .bkWMgd .g div.r</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>248<span class="token punctuation">,</span> 248<span class="token punctuation">,</span> 248<span class="token punctuation">,</span> .6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span>0 -20px 10px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>8px 20px 5px<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .f13 a,
    .srg .f13 em,
    .srg .c-span18 a,
    .srg .subLink_factory a,
    .srg .c-tabs-content a,
    .srg .op_offical_weibo_content a,
    .srg .op_offical_weibo_pz a,
    .srg .op_tieba2_tablinks_container a,
    .srg .op-tieba-general-right,
    .srg .op_dq01_title,
    .srg .op_dq01_table a,
    .srg .op_dq01_morelink a,
    .srg .op-tieba-general-mainpl a,
    .srg .op-se-listen-recommend,
    .srg .c-offset>div a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#2866bd
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .f13 a:hover,
    .srg .f13 em:hover,
    .srg .subLink_factory a:hover,
    .srg .c-tabs-content a:hover,
    .srg .op_tieba2_tablinks_container a:hover,
    .srg .op-tieba-general-right:hover,
    .srg .op_dq01_title:hover,
    .srg .op_dq01_table a:hover,
    .srg .op_dq01_morelink a:hover,
    .srg .op-tieba-general-mainpl a:hover,
    .srg .op-se-listen-recommend:hover,
    .srg .c-offset>div a:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .f13 a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>green
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .c-span18,
    .srg .c-span24</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
        <span class="token property">min-width</span><span class="token punctuation">:</span>unset
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .c-border</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">border-bottom-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span>
        <span class="token property">border-right-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span>0 0 0 transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .se_com_irregular_gallery ul li,
    .srg .op_jingyan_list,
    .bkWMgd .g .op-img-address-link-type</span> <span class="token punctuation">&#123;</span>
        <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span>10px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd .g[tpl=soft] .op-soft-title a,
    .bkWMgd .g[tpl=soft] .op-soft-title a em,
    .bkWMgd .g div.r>a,
    .bkWMgd .g a h3,
    .bkWMgd .g div.r>a em</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#2866bd<span class="token punctuation">;</span>
        <span class="token property">font-weight</span><span class="token punctuation">:</span>700
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a:visited,
    .srg .op-soft-title a:visited em,
    .bkWMgd .g div.r>a:visited,
    .bkWMgd .g div.r>a:visited em,
    .bkWMgd .g a:visited h3</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#609
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a,
    .bkWMgd .g div.r>a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">position</span><span class="token punctuation">:</span>relative
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a em,
    .bkWMgd .g div.r>a em</span> <span class="token punctuation">&#123;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span>none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a:hover:after,
    .bkWMgd .g div.r>a:hover:after</span> <span class="token punctuation">&#123;</span>
        <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span>width 350ms
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a:after,
    .bkWMgd .g div.r>a:after</span> <span class="token punctuation">&#123;</span>
        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>2px solid #2866bd<span class="token punctuation">;</span>
        <span class="token property">bottom</span><span class="token punctuation">:</span>-2px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">,</span>left 350ms<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">,</span>left 350ms<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">,</span>left 350ms
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a .bkWMgd .g div.r>a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">position</span><span class="token punctuation">:</span>relative
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a:visited:hover:after,
    .bkWMgd .g div.r>a:visited:hover:after</span> <span class="token punctuation">&#123;</span>
        <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span>width 350ms
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.srg .op-soft-title a:visited:after,
    .bkWMgd .g div.r>a:visited:after</span> <span class="token punctuation">&#123;</span>
        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span>2px solid #609<span class="token punctuation">;</span>
        <span class="token property">bottom</span><span class="token punctuation">:</span>-2px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">,</span>left 350ms<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">,</span>left 350ms<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span>width 350ms<span class="token punctuation">,</span>left 350ms
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>0 20px 15px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs .tt</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span>0 -20px 5px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>5px 20px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span>#f8f8f8<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs table</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>630px<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>5px 15px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs table tr a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#2866bd
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs table tr a:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span>underline
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#page</span> <span class="token punctuation">&#123;</span>
        <span class="token property">min-width</span><span class="token punctuation">:</span>710px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span>
        <span class="token property">padding-top</span><span class="token punctuation">:</span>5px<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span>0 0 50px 80px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.op-img-address-desktop-cont</span> <span class="token punctuation">&#123;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span>hidden
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#page a,
    #page strong</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#2866bd<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span>none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#page .n:hover,
    #page a:hover .pc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">border</span><span class="token punctuation">:</span>1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>237<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>#d8d8d8<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#0057da
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#page strong .pc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span>#4879bd<span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span>#fff
    <span class="token punctuation">&#125;</span>
    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> left_logoR</span> <span class="token punctuation">&#123;</span>
    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>
        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span>64px<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span>0
    <span class="token punctuation">&#125;</span>
    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span>0
    <span class="token punctuation">&#125;</span>
    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span>1
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd>div:not([class])</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>730px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd>div:not([class])</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span>18px<span class="token punctuation">;</span>
        <span class="token property">margin-right</span><span class="token punctuation">:</span>18px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bkWMgd .g .exp-outline</span> <span class="token punctuation">&#123;</span>
        <span class="token property">display</span><span class="token punctuation">:</span>none
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#main .mw #rhs</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span>1020px
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#res .g .ts</span> <span class="token punctuation">&#123;</span>
        <span class="token property">max-width</span><span class="token punctuation">:</span>unset
    <span class="token punctuation">&#125;</span>
    <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1400px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
        <span class="token selector">.mw #rhs</span> <span class="token punctuation">&#123;</span>
            <span class="token property">display</span><span class="token punctuation">:</span>none
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">cite</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token punctuation">;</span>
        <span class="token property">font-weight</span><span class="token punctuation">:</span>400
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#res .r</span> <span class="token punctuation">&#123;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span>1.3
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#res</span> <span class="token punctuation">&#123;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span>0
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#rs,
    .bkWMgd .g</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.c2xzTb .g,
    .ruTcId .g,
    .fm06If .g,
    .cUnQKe .g,
    .HanQmf .g</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span>758px<span class="token punctuation">;</span>
        <span class="token property">padding-left</span><span class="token punctuation">:</span>20px<span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">padding-right</span><span class="token punctuation">:</span>20px<span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">box-shadow</span><span class="token punctuation">:</span>0 0 0 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div .xfxx5d</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span>-18px<span class="token important">!important</span><span class="token punctuation">;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span>-25px<span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div .xaqJzf.xfxx5d .kno-ftr</span> <span class="token punctuation">&#123;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span>10px<span class="token important">!important</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div .kno-ftr a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">position</span><span class="token punctuation">:</span>sticky
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div .LHJvCe</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.yDYNvb.lyLwlc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.yXK7lf em</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.dyjrff</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.O3JH7.qLBFXd</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.dvDNH</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.gyWzne</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.WZ8Tjf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>91<span class="token punctuation">,</span> 247<span class="token punctuation">,</span> 135<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.k8XOCe</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>236<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.GmE3X</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.MXl0lf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #52ef7a<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #263a62<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.GHDvEf, .GHDvEf:hover, .GHDvEf.selected, .GHDvEf.selected:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #fe8a12
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.I6TXqe</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>192 243 3 / 35%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.uo4vr</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.sWISj</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.S1FAPd</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.O3JH7</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.YyVfkd</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 250 227<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.AaVjTc a:link</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.sfbg</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 255 255 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.gLFyf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>3 22 251<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.yg51vc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 255 255 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.hdtb-mitem.hdtb-msel</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #4b00ff<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.hdtb-mitem a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e4f304<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.hdtb-mitem .GOE98c, .t2vtad</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e4f304<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.iv236</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #1c00ff<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.Lj9fsd</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 255 255 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.s8GCU</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 255 255 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.usJj9c .st</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.TXwUJf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">a.fl:link, .fl a, .gl a:link</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.f6F9Be</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #e10b0b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#Wprf1b</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.unknown_loc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #007efc<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">g-inner-card</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #140f5d<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.UlIbl</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #93c2f3<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.KFFQ0c .YfftMc, .KFFQ0c .YfftMc span, .KFFQ0c .YfftMc div, .KFFQ0c .YfftMc a</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.hMJ0yc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.FzCfme</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.FalWJb</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> #93c2f3<span class="token punctuation">;</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.c93Gbe</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#SIvCob</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.QCzoEc:hover</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #7802ff<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#tw-target</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">textarea</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#tw-target-rmn.tw-data-text, #tw-source-rmn.tw-data-text</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.MaH2Hf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.QXzCSe</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.SvKTZc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.bHOicb</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.tw-bilingual-pos</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.YrbPuc, .qHx7jd</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ubHt5c</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.pdpvld</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.e9EfHf</span> <span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>1 1 1 / 62%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div.lr_container</span><span class="token punctuation">&#123;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>34 133 255 / 59%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.hb8SAc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.cwUqwd</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ckp3Pb</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">div.zz3gNc</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ExCKkf</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ExCKkf:hover</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #7802ff <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ynAwRc</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.wwUB2c</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.z8gr9e</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.hhB0V</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#div.tw-target-text-container.tw-ta-container.F0azHf.tw-nfl</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">#gsr.srp</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.tw-menu-btn</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.P1usbc</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.Uroaid</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.P7xzyf</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.Zg1NU</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.dbg0pd</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #e6ff02<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.cXedhc</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #0092ff<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.ZE0LJd</span><span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #0092ff<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Plugin Template</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>CSS</tag>
        <tag>Stylus</tag>
      </tags>
  </entry>
</search>
